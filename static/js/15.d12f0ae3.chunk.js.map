{"version":3,"sources":["services/apis.ts","services/lib/maps.ts","services/lib/avocado.ts","services/lib/hurricane.ts","util/inflation.ts","services/lib/minimumWage.ts","services/hooks/useQuery.tsx","hooks/useFallback.tsx","hooks/useResizeChart.tsx","layout/PageLayout.tsx","pages/MinimumWage/constants.ts","components/GeospatialChart/hooks/useGeospatialChart.tsx","components/GeospatialChart/GeospatialChart.tsx","components/GeospatialChart/hooks/usePanAndZoom.tsx","components/GeospatialChart/YearSelector.tsx","pages/MinimumWage/GeospatialChartPage/GeospatialChartPage.tsx"],"names":["BASE_URL","API","MinimumWageCSV","AvocadoCSV","HurricaneCSV","RentCSV","WorldMap","USMap","fetchWorldMap","a","fetch","json","worldMap","fetchUSMap","usMap","parseCSV","row","index","columns","date","parse","Date","averagePrice","Number","AveragePrice","totalVolume","totalBags","smallBags","largeBags","xLargeBags","type","year","region","month","getMonth","day","getDate","rowType","fetchAvocadoCSV","csv","avocadoCSV","filter","convertLatLong","lat","direction","slice","coordinate","refinedCoordinate","id","ID","name","Name","time","event","Event","status","Status","latitude","Latitude","longitude","Longitude","maxWind","minPressure","lowWindNE","lowWindSE","lowWindSW","lowWindNW","moderateWindNE","moderateWindSE","moderateWindSW","moderateWindNW","highWindNE","highWindSE","highWindSW","highWindNW","getFullYear","fetchHurricaneCSV","hurricaneCSV","accountForInflation","fromCPI","dollars","parseMinimumCsv","Year","state","State","stateMinWage","stateMinWageTodayDollars","federalMinWage","federalMinWageTodayDollars","effectiveMinWage","effectiveMinWageTodayDollars","cpiAverage","depLaborUncleanData","depLaborCleanedLowValue","depLaborCleanedLowValueTodayDollars","depLaborCleanedHighValue","depLaborCleanedHighValueTodayDollars","footnote","Footnote","parseRentCsv","studio","oneBedroom","twoBedroom","threeBedroom","fourBedroom","population","Population","merge","rents","minWages","map","minWage","rent","find","fetchMinimumWageCSV","useMinimumWageQuery","options","useQuery","useAvocadoQuery","useHurricaneQuery","useWorldMapQuery","useUSMapQuery","Text","Typography","useFallback","isLoading","isError","data","fallback","strong","style","color","initialDimensions","height","width","marginTop","marginRight","marginBottom","marginLeft","useResizeChart","ref","useRef","useState","setWidth","setHeight","useEffect","resizeObserver","ResizeObserver","entries","Array","isArray","length","entry","contentRect","current","element","observe","unobserve","newChartDimensions","dimensions","parsedDimensions","boundedHeight","Math","max","boundedWidth","combineChartDimensions","PageLayout","pageTitle","menuItems","description","generateChart","showDescriptionTitle","size","justify","gutter","xs","fontSize","Constants","minWageUrl","rentUrl","GeospatialChart","projection","path","features","rows","worldData","isWorldDataError","isWorldDataLoading","usData","isUSDataError","isUSDataLoading","Loading","useGeospatialChart","svgZoom","zoom","on","select","attr","transform","scaleExtent","translateExtent","call","usePanAndZoom","geoMercator","center","scale","rotate","geoPath","feature","objects","countries","geoAlbersUsa","translate","states","coords","filteredYear","colorSaturationScale","scaleSequential","domain","extent","minimumWage","interpolator","interpolateBlues","reduce","acc","push","display","overflowX","justifyContent","value","d","stroke","strokeWidth","cx","cy","r","fill","el","properties","YearSelector","minYear","maxYear","onChange","min","onAfterChange","GeospatialChartPage","selectedYear","setSelectedYear","to","pathname","target"],"mappings":"6UAAMA,EAAW,8CAEJC,EAAM,CACjBC,eAAe,GAAD,OAAKF,EAAL,uGACdG,WAAW,GAAD,OAAKH,EAAL,6FACVI,aAAa,GAAD,OAAKJ,EAAL,6FACZK,QAAQ,GAAD,OAAKL,EAAL,0FACPM,SAAU,sDACVC,MAAO,oDCJIC,EAAa,uCAAG,4BAAAC,EAAA,sEACIC,MAAMT,EAAIK,UADd,8BACyBK,OADzB,cACrBC,EADqB,yBAEpBA,GAFoB,2CAAH,qDAKbC,EAAU,uCAAG,4BAAAJ,EAAA,sEACIC,MAAMT,EAAIM,OADd,8BACsBI,OADtB,cAClBG,EADkB,yBAEjBA,GAFiB,2CAAH,qD,kBCFjBC,EAIS,SAACC,EAAKC,EAAOC,GAAa,IAAD,EAChCC,EAAOC,YAAK,UAACJ,EAAIK,YAAL,QAAa,GAAI,aAAc,IAAIA,MACrD,MAAO,CACLF,KAAMH,EAAIK,KACVC,aAAcC,OAAOP,EAAIQ,cACzBC,YAAaF,OAAOP,EAAI,iBACxB,KAAQO,OAAOP,EAAI,OACnB,KAAQO,OAAOP,EAAI,OACnB,KAAQO,OAAOP,EAAI,OACnBU,UAAWH,OAAOP,EAAI,eACtBW,UAAWJ,OAAOP,EAAI,eACtBY,UAAWL,OAAOP,EAAI,eACtBa,WAAYN,OAAOP,EAAI,gBACvBc,KAAMd,EAAIc,KACVC,KAAMR,OAAOP,EAAIe,MACjBC,OAAQhB,EAAIgB,OACZC,MAAOd,EAAKe,WAAa,EACzBC,IAAKhB,EAAKiB,UACVC,QAAS,YAIAC,EAAe,uCAAG,4BAAA7B,EAAA,sEACH8B,YAAItC,EAAIE,WAAYY,GADjB,cACvByB,EADuB,OAC4BC,QACvD,SAACzB,GAAD,OAAsB,IAAbA,EAAIe,QAFc,kBAItBS,GAJsB,2CAAH,qDC1BtBE,EAAiB,SAACC,GACtB,IAAMC,EAAS,OAAGD,QAAH,IAAGA,OAAH,EAAGA,EAAKE,OAAO,GACxBC,EAAavB,OAAM,OAACoB,QAAD,IAACA,OAAD,EAACA,EAAKE,MAAM,GAAI,IACrCE,EAAoB,EACxB,OAAQH,GACN,IAAK,IACL,IAAK,IACHG,EAAoBxB,OAAOuB,IAAe,EAC1C,MACF,QACEC,EAAoBxB,OAAOuB,GAG/B,OAAOC,GAGHhC,EAIW,SAACC,EAAKC,EAAOC,GAAa,IAAD,EAClCC,EAAOC,YAAK,UAACJ,EAAIK,YAAL,QAAa,GAAI,WAAY,IAAIA,MAEnD,MAAO,CACL2B,GAAIhC,EAAIiC,GACRC,KAAMlC,EAAImC,KACVhC,KAAMH,EAAIK,KACV+B,KAAM7B,OAAOP,EAAIoC,MACjBC,MAAOrC,EAAIsC,MACXC,OAAQvC,EAAIwC,OACZC,SAAUf,EAAe1B,EAAI0C,UAC7BC,UAAWjB,EAAe1B,EAAI4C,WAC9BC,QAAStC,OAAOP,EAAI,iBACpB8C,YAAavC,OAAOP,EAAI,qBACxB+C,UAAWxC,OAAOP,EAAI,gBACtBgD,UAAWzC,OAAOP,EAAI,gBACtBiD,UAAW1C,OAAOP,EAAI,gBACtBkD,UAAW3C,OAAOP,EAAI,gBACtBmD,eAAgB5C,OAAOP,EAAI,qBAC3BoD,eAAgB7C,OAAOP,EAAI,qBAC3BqD,eAAgB9C,OAAOP,EAAI,qBAC3BsD,eAAgB/C,OAAOP,EAAI,qBAC3BuD,WAAYhD,OAAOP,EAAI,iBACvBwD,WAAYjD,OAAOP,EAAI,iBACvByD,WAAYlD,OAAOP,EAAI,iBACvB0D,WAAYnD,OAAOP,EAAI,iBACvBe,KAAMZ,EAAKwD,cACX1C,MAAOd,EAAKe,WAAa,EACzBC,IAAKhB,EAAKiB,UACVC,QAAS,cAIAuC,EAAiB,uCAAG,4BAAAnE,EAAA,sEACJ8B,YAAItC,EAAIG,aAAcW,GADlB,cACzB8D,EADyB,yBAExBA,GAFwB,2CAAH,qD,SC1DjBC,EAAsB,SAACC,EAAiBC,GACnD,OAAQA,EAAUD,EAHF,QCMZE,EAIa,SAACjE,GAClB,MAAO,CACLe,KAAMR,OAAOP,EAAIkE,MACjBC,MAAOnE,EAAIoE,MACXC,aAAc9D,OAAOP,EAAI,uBACzBsE,yBAA0B/D,OAAOP,EAAI,oCACrCuE,eAAgBhE,OAAOP,EAAI,yBAC3BwE,2BAA4BjE,OAC1BP,EAAI,sCAENyE,iBAAkBlE,OAAOP,EAAI,2BAC7B0E,6BAA8BnE,OAC5BP,EAAI,wCAEN2E,WAAYpE,OAAOP,EAAI,gBACvB4E,oBAAqB5E,EAAI,sCACzB6E,wBAAyBtE,OACvBP,EAAI,0CAEN8E,oCAAqCvE,OACnCP,EAAI,uDAEN+E,yBAA0BxE,OACxBP,EAAI,2CAENgF,qCAAsCzE,OACpCP,EAAI,wDAENiF,SAAUjF,EAAIkF,SACd7D,QAAS,YAIP8D,EAIM,SAACnF,GACX,MAAO,CACLmE,MAAOnE,EAAIoE,MACXrD,KAAMR,OAAOP,EAAIkE,MACjBkB,OAAQ7E,OAAOP,EAAI,cACnBqF,WAAY9E,OAAOP,EAAI,cACvBsF,WAAY/E,OAAOP,EAAI,cACvBuF,aAAchF,OAAOP,EAAI,cACzBwF,YAAajF,OAAOP,EAAI,cACxByF,WAAYlF,OAAOP,EAAI0F,YACvBrE,QAAS,SAIPsE,EAAQ,SACZC,EACAC,GAyBA,OAvBYA,EAASC,KAAI,SAACC,GACxB,IAAMC,EAAOJ,EAAMK,MACjB,SAACjG,GAAD,OAASA,EAAIe,OAASgF,EAAQhF,MAAQf,EAAImE,QAAU4B,EAAQ5B,SAG9D,OAAK6B,EAIE,2BACFD,GADL,IAEEX,OAAQtB,EAAoBiC,EAAQpB,WAAaqB,EAAKZ,QACtDC,WAAYvB,EAAoBiC,EAAQpB,WAAaqB,EAAKX,YAC1DC,WAAYxB,EAAoBiC,EAAQpB,WAAaqB,EAAKV,YAC1DC,aAAczB,EACZiC,EAAQpB,WACRqB,EAAKT,cAEPC,YAAa1B,EAAoBiC,EAAQpB,WAAaqB,EAAKR,aAC3DC,WAAYO,EAAKP,aAbVM,MAoBAG,EAAmB,uCAAG,8BAAAzG,EAAA,sEACV8B,YAAItC,EAAIC,eAAgB+E,GADd,cAC3B4B,EAD2B,gBAEbtE,YAAItC,EAAII,QAAS8F,GAFJ,cAE3BS,EAF2B,yBAI1BD,EAAMC,EAAOC,IAJa,2CAAH,qDC/E1BM,EAAsB,SAC1BC,GAD0B,OAG1BC,YACE,UACAH,EACAE,IAMEE,EAAkB,SACtBF,GADsB,OAGtBC,YAAyC,UAAW/E,EAAiB8E,IAEjEG,EAAoB,SACxBH,GADwB,OAGxBC,YACE,YACAzC,EACAwC,IAGEI,EAAmB,SAACJ,GAAD,OACvBC,YAA0B,WAAY7G,EAAe4G,IAEjDK,EAAgB,SAACL,GAAD,OACpBC,YAAuB,QAASxG,EAAYuG,K,iCCxC9C,+DAGQM,EAASC,IAATD,KAEKE,EAAc,SACzBC,EACAC,EACAC,GAEA,IAAIC,EAAW,KAkBf,OAhBIF,IACFE,EACE,cAACN,EAAD,CAAMO,QAAM,EAACC,MAAO,CAAEC,MAAO,OAA7B,sCAMAN,IACFG,EAAW,cAAC,IAAD,KAGRD,GAASF,IACZG,EAAW,cAACN,EAAD,CAAMO,QAAM,EAAZ,6BAGN,CAAED,c,6ICZLI,EAAoB,CACxBC,OAAQ,IACRC,MAAO,EACPC,UAAW,GACXC,YAAa,GACbC,aAAc,GACdC,WAAY,IA+BDC,EAAiB,WAC5B,IAAMC,EAAMC,iBAA8B,MAE1C,EAA0BC,mBAASV,EAAkBE,OAArD,mBAAOA,EAAP,KAAcS,EAAd,KACA,EAA4BD,mBAASV,EAAkBC,QAAvD,mBAAOA,EAAP,KAAeW,EAAf,KAEAC,qBAAU,WACR,IAAMC,EAAiB,IAAIC,KAAe,SAACC,GACzC,GAAKC,MAAMC,QAAQF,IAAaA,EAAQG,OAAxC,CAIA,IAAMC,EAAQJ,EAAQ,GAClBd,IAAUkB,EAAMC,YAAYnB,OAC9BS,EAASS,EAAMC,YAAYnB,OAGzBD,IAAWmB,EAAMC,YAAYpB,QAC/BW,EAAUQ,EAAMC,YAAYpB,YAIhC,GAAIO,EAAIc,QAAS,CACf,IAAMC,EAAUf,EAAIc,QAGpB,OAFAR,EAAeU,QAAQD,GAEhB,kBAAMT,EAAeW,UAAUF,IAGxC,OAAO,kBAAM,QACZ,CAACtB,EAAQC,IAEZ,IAAMwB,EA5DuE,SAC7EC,GAEA,IAAMC,EAAgB,2BACjBD,GADiB,IAEpBxB,UAAWwB,EAAWxB,WAAa,GACnCC,YAAauB,EAAWvB,aAAe,GACvCC,aAAcsB,EAAWtB,cAAgB,GACzCC,WAAYqB,EAAWrB,YAAc,KAGvC,OAAO,2BACFsB,GADL,IAEEC,cAAeC,KAAKC,IAClBH,EAAiB3B,OACf2B,EAAiBzB,UACjByB,EAAiBvB,aACnB,GAEF2B,aAAcF,KAAKC,IACjBH,EAAiB1B,MACf0B,EAAiBtB,WACjBsB,EAAiBxB,YACnB,KAqCuB6B,CAAuB,2BAC7CjC,GAD4C,IAE/CE,QACAD,YAGF,MAAO,CAAEO,MAAKmB,WAAYD,I,OCxFpBpC,EAASC,IAATD,KAaK4C,EAAwC,SAAC,GAM/C,IALLC,EAKI,EALJA,UACAC,EAII,EAJJA,UACAC,EAGI,EAHJA,YACAC,EAEI,EAFJA,cAEI,IADJC,4BACI,SACJ,EAA4BhC,IAApBC,EAAR,EAAQA,IAAKmB,EAAb,EAAaA,WAEb,OACE,qBAAK7B,MAAO,CAAEI,MAAO,QAAUM,IAAKA,EAApC,SACE,eAAC,IAAD,CAAOhG,UAAU,WAAWgI,KAAK,QAAQ1C,MAAO,CAAEI,MAAO,QAAzD,UACE,eAAC,IAAD,CAAKJ,MAAO,CAAEI,MAAO,QAAUuC,QAAQ,gBAAgBC,OAAQ,CAAC,EAAG,IAAnE,UACE,cAAC,IAAD,CAAKC,GAAI,EAAT,SACE,cAACrD,EAAD,CAAMO,QAAM,EAACC,MAAO,CAAE8C,SAAU,IAAhC,SACGT,MAGL,cAAC,IAAD,CAAKQ,GAAI,GAAT,SAAcP,OAEfE,EAAcX,GACf,eAAC,IAAD,CAAOnH,UAAU,WAAjB,UACG+H,GACC,cAACjD,EAAD,CAAMO,QAAM,EAACC,MAAO,CAAE8C,SAAU,IAAhC,yBAIF,cAACtD,EAAD,CAAMQ,MAAO,CAAE8C,SAAU,IAAzB,SAAgCP,c,iCC7C1C,kCAAO,IAAMQ,EAAY,CACvBC,WACE,mEACFC,QAAS,qE,6JCOHzD,EAASC,IAATD,K,OCmBK0D,EAAkD,SAAC,GAKzD,IAaDC,EACAC,EACAC,EAnBJjD,EAII,EAJJA,MACAD,EAGI,EAHJA,OACAmD,EAEI,EAFJA,KACAzJ,EACI,EADJA,KAEQM,EAAYmJ,EAAK,GAAjBnJ,QACFP,EAAmB,cAAZO,EAA0B,QAAU,KAE3CuG,EAAMC,iBAAsB,MAClC,EDxBE,WAAqB,IAiBnBb,EAjBDlG,EAAmB,uDAAZ,QACV,EAII0F,cAHIiE,EADR,EACE1D,KACS2D,EAFX,EAEE5D,QACW6D,EAHb,EAGE9D,UAGF,EAIIJ,cAHImE,EADR,EACE7D,KACS8D,EAFX,EAEE/D,QACWgE,EAHb,EAGEjE,UAIIC,EAAU4D,GAAoBG,EAC9B9D,EAAgB,UAATjG,EAAmB2J,EAAYG,EAW5C,OAbkBD,GAAsBG,KAMtC9D,EAAW,cAAC+D,EAAA,EAAD,MAGTjE,GAAYC,IACdC,EAAW,cAACN,EAAD,0BAGN,CACLK,KAAMA,EACNC,YCJyBgE,CAAmBlK,GAAtCiG,EAAR,EAAQA,KAAMC,EAAd,EAAcA,SAId,GCvC2B,SAC3BY,EACAP,EACAvG,GAEAmH,qBAAU,WACR,GAAIL,EAAIc,QAAS,CACf,IAAMuC,EAAUC,cAEhBD,EAAQE,GAAG,QAAQ,SAAC9I,GAAD,OACjB+I,YAAO,cAAcC,KAAK,YAAahJ,EAAMiJ,cAGlC,UAATxK,GACFmK,EAAQM,YAAY,CAAC,EAAG,IACxBN,EAAQO,gBAAgB,CACtB,EAAE,IAAK,IACP,CAAC,KAAMnE,OAGT4D,EAAQM,YAAY,CAAC,EAAG,IACxBN,EAAQO,gBAAgB,CACtB,CAAC,EAAG,IACJ,CAAC,KAAMnE,MAIX+D,YAAOxD,EAAIc,SAAS+C,KAAKR,MAE1B,CAACrD,EAAKP,EAAQvG,IDQjB4K,CAAc9D,EAAKP,EAAQvG,GAEvBkG,EACF,OAAOA,EAMT,GAAa,UAATlG,EAAkB,CACpB,IAAM2J,EAAY1D,EAClBsD,EAAasB,cAAcC,OAAO,CAAC,EAAG,KAAKC,MAAM,KAAKC,OAAO,EAAE,IAAK,IACpExB,EAAOyB,cAAU1B,WAAWA,GAC5BE,EAAWyB,YAAQvB,EAAWA,EAAUwB,QAAQC,WAAW3B,aACtD,CACL,IAAMK,EAAS7D,EACfsD,EAAa8B,cACVC,UAAU,CAAC9E,EAAQ,EAAGD,EAAS,IAC/BwE,MAAM,KACTvB,EAAOyB,cAAU1B,WAAWA,GAC5BE,EAAWyB,YAAQpB,EAAQA,EAAOqB,QAAQI,QAAQ9B,SAGpD,IAQI1E,EARAyG,EAA6B,GASjC,GARgB,cAAZjL,IACFiL,EAAU9B,EAAqB1E,KAAI,SAAC9F,GAAD,MAAS,CAC1CA,EAAI2C,UACJ3C,EAAIyC,cAKQ,YAAZpB,EAAuB,CACzB,IAAMkL,EAAgB/B,EAAuB/I,QAC3C,SAACzB,GAAD,OAASA,EAAIe,OAASA,KAGlByL,EAAuBC,cAC1BC,OACCC,YAAOJ,GAAc,SAACK,GACpB,OAAOA,EAAYlI,iCAGtBmI,aAAaC,KAEhBjH,EAAW0G,EAAaQ,QAAO,SAACC,EAAKtE,GAAa,IAAD,EAQ/C,OAPAsE,EAAIC,KAAK,CACP9I,MAAK,UAAEuE,EAAQvE,aAAV,QAAmB,GACxB4B,QAASxF,OAAOmI,EAAQhE,8BACxByC,MAAOqF,EACLjM,OAAOmI,EAAQhE,iCAGZsI,IACN,IAGL,OACE,qBACE9F,MAAO,CACLI,QACAD,SACA6F,QAAS,OACTC,UAAW,OACXC,eAAgB,UANpB,SASE,sBAAK/F,OAAQA,EAAQC,MAAO,KAAMM,IAAKA,EAAvC,UACY,UAAT9G,GACC,oBAAGkB,GAAG,YAAN,UACGuI,EAASzE,KAAI,SAACuH,EAAOpN,GAAR,OACZ,sBAEEqN,EAAGhD,EAAK+C,GACRE,OAAO,UACPC,YAAa,IAHRvN,MAMRqM,EAAOxG,KAAI,SAACuH,EAAOpN,GAAR,mBACV,wBAEEwN,GAAE,oBAAEpD,EAAWgD,UAAb,aAAE,EAAoB,UAAtB,QAA4B,EAC9BK,GAAE,oBAAErD,EAAWgD,UAAb,aAAE,EAAoB,UAAtB,QAA4B,EAC9BM,EAAG,GAHE1N,SAQH,OAATa,GACC,mBAAGkB,GAAG,SAAN,SACGuI,EAASzE,KAAI,SAACuH,EAAOpN,GAAR,eACZ,sBAEEqN,EAAGhD,EAAK+C,GACRE,OAAO,QACPC,YAAa,GACbI,KAAI,oBACF/H,EAAUI,MAAK,SAAC4H,GAAD,OAAQA,EAAG1J,QAAUkJ,EAAMS,WAAW5L,eADnD,aACF,EACIiF,aAFF,QAEW,SANVlH,c,kBEnIbyG,EAASC,IAATD,KAQKqH,EAA4C,SAAC,GAInD,IAHLC,EAGI,EAHJA,QACAC,EAEI,EAFJA,QACAC,EACI,EADJA,SAEA,OACE,eAAC,IAAD,CAAOhH,MAAO,CAAEI,MAAO,QAAU1F,UAAU,WAA3C,UACE,cAAC,EAAD,CAAMqF,QAAM,EAAZ,0BACA,cAAC,IAAD,CAAQkH,IAAKH,EAAS7E,IAAK8E,EAASG,cAAeF,S,yKCFjDxH,EAASC,IAATD,KAEK2H,EAA0D,WACrE,MAAqClI,cAA7BY,EAAR,EAAQA,KAAMD,EAAd,EAAcA,QAASD,EAAvB,EAAuBA,UACvB,EAAwCiB,mBAAS,MAAjD,mBAAOwG,EAAP,KAAqBC,EAArB,KAEQvH,EAAaJ,YAAyBC,EAAWC,EAASC,GAA1DC,SAGR,GAAIA,IAAaD,EACf,OAAOC,EAGT,IAAMyC,EACJ,qCACE,eAAC/C,EAAD,8MAGwD,IACtD,cAAC,IAAD,CAAM8H,GAAI,CAAEC,SAAUxE,IAAUC,YAAcwE,OAAO,SAArD,kCAJF,OASA,+BACE,2EACA,2FAKN,OACE,cAACpF,EAAA,EAAD,CACEC,UAAU,gCACVC,UACE,cAAC,IAAD,CACEwE,QAASjH,EAAK,GAAGhG,KACjBkN,QAASlH,EAAKA,EAAKwB,OAAS,GAAGxH,KAC/BmN,SAAUK,IAGd7E,cAAe,gBAAGpC,EAAH,EAAGA,MAAH,OACb,cAAC8C,EAAA,EAAD,CACE9C,MAAOA,EACPD,OAAQ,IACRmD,KAAMzD,EACNhG,KAAMuN,KAGV7E,YAAaA","file":"static/js/15.d12f0ae3.chunk.js","sourcesContent":["const BASE_URL = 'https://gist.githubusercontent.com/apetit2/';\n\nexport const API = {\n  MinimumWageCSV: `${BASE_URL}212a7cd715f8ba34eb637d014fffb12f/raw/0cc5e300ed1747be91ec391f4546e1a44c90d810/minimum-wage-data.csv`,\n  AvocadoCSV: `${BASE_URL}a3a8f61f0c56a1d1448804a584b7c1bb/raw/53be30feacedf088d4b8f609ccc509ca1e52591d/avocado.csv`,\n  HurricaneCSV: `${BASE_URL}5c1aa857558bc646281763252ea13d57/raw/daa565a0dc8c0dd99a63d162efad23037b067678/pacific.csv`,\n  RentCSV: `${BASE_URL}aaa39169ab48ff313cfb2bfe12486fef/raw/6d5308a46301f7f2b08c6974a3be7e7e138434f8/rent.csv`,\n  WorldMap: 'https://unpkg.com/world-atlas@1.1.4/world/110m.json',\n  USMap: 'https://unpkg.com/us-atlas@3.0.0/states-10m.json',\n};\n","import { USMap, WorldMap } from '../models/maps';\n\nimport { API } from '../apis';\n\nexport const fetchWorldMap = async () => {\n  const worldMap = (await (await fetch(API.WorldMap)).json()) as WorldMap;\n  return worldMap;\n};\n\nexport const fetchUSMap = async () => {\n  const usMap = (await (await fetch(API.USMap)).json()) as USMap;\n  return usMap;\n};\n","/* eslint-disable @typescript-eslint/no-unused-vars */\nimport { DSVParsedArray, DSVRowString, csv } from 'd3';\n\nimport { API } from '../apis';\nimport { Avocado } from '../models/avocado';\nimport { parse } from 'date-fns';\n\nconst parseCSV: (\n  row: DSVRowString<string>,\n  index: number,\n  columns: string[]\n) => Avocado = (row, index, columns) => {\n  const date = parse(row.Date ?? '', 'yyyy-MM-dd', new Date());\n  return {\n    date: row.Date,\n    averagePrice: Number(row.AveragePrice),\n    totalVolume: Number(row['Total Volume']),\n    '4046': Number(row['4046']),\n    '4225': Number(row['4225']),\n    '4770': Number(row['4770']),\n    totalBags: Number(row['Total Bags']),\n    smallBags: Number(row['Small Bags']),\n    largeBags: Number(row['Large Bags']),\n    xLargeBags: Number(row['XLarge Bags']),\n    type: row.type,\n    year: Number(row.year),\n    region: row.region,\n    month: date.getMonth() + 1,\n    day: date.getDate(),\n    rowType: 'Avocado',\n  };\n};\n\nexport const fetchAvocadoCSV = async () => {\n  const avocadoCSV = (await csv(API.AvocadoCSV, parseCSV)).filter(\n    (row) => row.year !== 0\n  ) as DSVParsedArray<Avocado>;\n  return avocadoCSV;\n};\n","/* eslint-disable @typescript-eslint/no-unused-vars */\nimport { DSVRowString, csv } from 'd3';\n\nimport { API } from '../apis';\nimport { Hurricane } from '../models/hurricane';\nimport { parse } from 'date-fns';\n\nconst convertLatLong = (lat: string | undefined) => {\n  const direction = lat?.slice(-1);\n  const coordinate = Number(lat?.slice(0, -1));\n  let refinedCoordinate = 0;\n  switch (direction) {\n    case 'W':\n    case 'S':\n      refinedCoordinate = Number(coordinate) / -1;\n      break;\n    default:\n      refinedCoordinate = Number(coordinate);\n  }\n\n  return refinedCoordinate;\n};\n\nconst parseCSV: (\n  row: DSVRowString<string>,\n  index: number,\n  columns: string[]\n) => Hurricane = (row, index, columns) => {\n  const date = parse(row.Date ?? '', 'yyyyMMdd', new Date());\n\n  return {\n    id: row.ID,\n    name: row.Name,\n    date: row.Date,\n    time: Number(row.time),\n    event: row.Event,\n    status: row.Status,\n    latitude: convertLatLong(row.Latitude),\n    longitude: convertLatLong(row.Longitude),\n    maxWind: Number(row['Maximum Wind']),\n    minPressure: Number(row['Minimum Pressure']),\n    lowWindNE: Number(row['Low Wind NE']),\n    lowWindSE: Number(row['Low Wind SE']),\n    lowWindSW: Number(row['Low Wind SW']),\n    lowWindNW: Number(row['Low Wind NW']),\n    moderateWindNE: Number(row['Moderate Wind NE']),\n    moderateWindSE: Number(row['Moderate Wind SE']),\n    moderateWindSW: Number(row['Moderate Wind SW']),\n    moderateWindNW: Number(row['Moderate Wind NW']),\n    highWindNE: Number(row['High Wind NE']),\n    highWindSE: Number(row['High Wind SE']),\n    highWindSW: Number(row['High Wind SW']),\n    highWindNW: Number(row['High Wind NW']),\n    year: date.getFullYear(),\n    month: date.getMonth() + 1,\n    day: date.getDate(),\n    rowType: 'Hurricane',\n  };\n};\n\nexport const fetchHurricaneCSV = async () => {\n  const hurricaneCSV = await csv(API.HurricaneCSV, parseCSV);\n  return hurricaneCSV;\n};\n","const CPI_TODAY = 260.28;\n\nexport const accountForInflation = (fromCPI: number, dollars: number) => {\n  return (dollars * fromCPI) / CPI_TODAY;\n};\n","import { DSVRowString, csv, DSVParsedArray } from 'd3';\nimport { accountForInflation } from '../../util/inflation';\n\nimport { API } from '../apis';\nimport { MinimumWage, Rent } from '../models/minimumWage';\n\nconst parseMinimumCsv: (\n  row: DSVRowString<string>,\n  index: number,\n  columns: string[]\n) => MinimumWage = (row) => {\n  return {\n    year: Number(row.Year),\n    state: row.State,\n    stateMinWage: Number(row['State.Minimum.Wage']),\n    stateMinWageTodayDollars: Number(row['State.Minimum.Wage.2020.Dollars']),\n    federalMinWage: Number(row['Federal.Minimum.Wage']),\n    federalMinWageTodayDollars: Number(\n      row['Federal.Minimum.Wage.2020.Dollars']\n    ),\n    effectiveMinWage: Number(row['Effective.Minimum.Wage']),\n    effectiveMinWageTodayDollars: Number(\n      row['Effective.Minimum.Wage.2020.Dollars']\n    ),\n    cpiAverage: Number(row['CPI.Average']),\n    depLaborUncleanData: row['Department.Of.Labor.Uncleaned.Data'],\n    depLaborCleanedLowValue: Number(\n      row['Department.Of.Labor.Cleaned.Low.Value']\n    ),\n    depLaborCleanedLowValueTodayDollars: Number(\n      row['Department.Of.Labor.Cleaned.Low.Value.2020.Dollars']\n    ),\n    depLaborCleanedHighValue: Number(\n      row['Department.Of.Labor.Cleaned.High.Value']\n    ),\n    depLaborCleanedHighValueTodayDollars: Number(\n      row['Department.Of.Labor.Cleaned.High.Value.2020.Dollars']\n    ),\n    footnote: row.Footnote,\n    rowType: 'MinWage',\n  };\n};\n\nconst parseRentCsv: (\n  row: DSVRowString<string>,\n  index: number,\n  columns: string[]\n) => Rent = (row) => {\n  return {\n    state: row.State,\n    year: Number(row.Year),\n    studio: Number(row['Rent 0 BR']),\n    oneBedroom: Number(row['Rent 1 BR']),\n    twoBedroom: Number(row['Rent 2 BR']),\n    threeBedroom: Number(row['Rent 3 BR']),\n    fourBedroom: Number(row['Rent 4 BR']),\n    population: Number(row.Population),\n    rowType: 'Rent',\n  };\n};\n\nconst merge = (\n  rents: DSVParsedArray<Rent>,\n  minWages: DSVParsedArray<MinimumWage>\n) => {\n  const res = minWages.map((minWage) => {\n    const rent = rents.find(\n      (row) => row.year === minWage.year && row.state === minWage.state\n    );\n\n    if (!rent) {\n      return minWage;\n    }\n\n    return {\n      ...minWage,\n      studio: accountForInflation(minWage.cpiAverage!, rent.studio!),\n      oneBedroom: accountForInflation(minWage.cpiAverage!, rent.oneBedroom!),\n      twoBedroom: accountForInflation(minWage.cpiAverage!, rent.twoBedroom!),\n      threeBedroom: accountForInflation(\n        minWage.cpiAverage!,\n        rent.threeBedroom!\n      ),\n      fourBedroom: accountForInflation(minWage.cpiAverage!, rent.fourBedroom!),\n      population: rent.population,\n    } as MinimumWage;\n  });\n\n  return res as DSVParsedArray<MinimumWage>;\n};\n\nexport const fetchMinimumWageCSV = async () => {\n  const minWages = await csv(API.MinimumWageCSV, parseMinimumCsv);\n  const rents = await csv(API.RentCSV, parseRentCsv);\n\n  return merge(rents, minWages);\n};\n\nexport const fetchRentCSV = async () => {\n  const res = await csv(API.RentCSV, parseRentCsv);\n  return res;\n};\n","import { USMap, WorldMap } from '../models/maps';\nimport { UseQueryOptions, useQuery } from 'react-query';\nimport { fetchUSMap, fetchWorldMap } from '../lib/maps';\n\nimport { Avocado } from '../models/avocado';\nimport { DSVParsedArray } from 'd3-dsv';\nimport { Hurricane } from '../models/hurricane';\nimport { MinimumWage, Rent } from '../models/minimumWage';\nimport { fetchAvocadoCSV } from '../lib/avocado';\nimport { fetchHurricaneCSV } from '../lib/hurricane';\nimport { fetchMinimumWageCSV, fetchRentCSV } from '../lib/minimumWage';\n\nconst useMinimumWageQuery = (\n  options?: UseQueryOptions<DSVParsedArray<MinimumWage>, Error>\n) =>\n  useQuery<DSVParsedArray<MinimumWage>, Error>(\n    'minWage',\n    fetchMinimumWageCSV,\n    options\n  );\n\nconst useRentQuery = (options?: UseQueryOptions<DSVParsedArray<Rent>, Error>) =>\n  useQuery<DSVParsedArray<Rent>, Error>('rent', fetchRentCSV, options);\n\nconst useAvocadoQuery = (\n  options?: UseQueryOptions<DSVParsedArray<Avocado>, Error>\n) =>\n  useQuery<DSVParsedArray<Avocado>, Error>('avocado', fetchAvocadoCSV, options);\n\nconst useHurricaneQuery = (\n  options?: UseQueryOptions<DSVParsedArray<Hurricane>, Error>\n) =>\n  useQuery<DSVParsedArray<Hurricane>, Error>(\n    'hurricane',\n    fetchHurricaneCSV,\n    options\n  );\n\nconst useWorldMapQuery = (options?: UseQueryOptions<WorldMap, Error>) =>\n  useQuery<WorldMap, Error>('worldMap', fetchWorldMap, options);\n\nconst useUSMapQuery = (options?: UseQueryOptions<USMap, Error>) =>\n  useQuery<USMap, Error>('usMap', fetchUSMap, options);\n\nexport {\n  useAvocadoQuery,\n  useHurricaneQuery,\n  useMinimumWageQuery,\n  useWorldMapQuery,\n  useUSMapQuery,\n  useRentQuery,\n};\n","import { CSVRow } from '../services/models/shared';\nimport { DSVParsedArray } from 'd3-dsv';\nimport { Loading } from '../components/Loading/Loading';\nimport { Typography } from 'antd';\n\nconst { Text } = Typography;\n\nexport const useFallback = <T extends CSVRow>(\n  isLoading: boolean,\n  isError: boolean,\n  data?: DSVParsedArray<T>\n) => {\n  let fallback = null;\n\n  if (isError) {\n    fallback = (\n      <Text strong style={{ color: 'red' }}>\n        Failed To Load Dataset.\n      </Text>\n    );\n  }\n\n  if (isLoading) {\n    fallback = <Loading />;\n  }\n\n  if (!data && !isLoading) {\n    fallback = <Text strong>No Data Found.</Text>;\n  }\n\n  return { fallback };\n};\n","// adapted from https://wattenberger.com/blog/react-and-d3\nimport { ResizeObserver } from '@juggle/resize-observer';\nimport { useEffect, useRef, useState } from 'react';\n\ninterface Dimensions {\n  height: number;\n  width: number;\n  marginTop: number;\n  marginRight: number;\n  marginBottom: number;\n  marginLeft: number;\n}\n\ninterface CombinedDimensions extends Dimensions {\n  boundedHeight: number;\n  boundedWidth: number;\n}\n\nconst initialDimensions = {\n  height: 400,\n  width: 0,\n  marginTop: 10,\n  marginRight: 10,\n  marginBottom: 40,\n  marginLeft: 75,\n};\n\nconst combineChartDimensions: (dimensions: Dimensions) => CombinedDimensions = (\n  dimensions\n) => {\n  const parsedDimensions = {\n    ...dimensions,\n    marginTop: dimensions.marginTop || 10,\n    marginRight: dimensions.marginRight || 10,\n    marginBottom: dimensions.marginBottom || 40,\n    marginLeft: dimensions.marginLeft || 75,\n  } as Dimensions;\n\n  return {\n    ...parsedDimensions,\n    boundedHeight: Math.max(\n      parsedDimensions.height -\n        parsedDimensions.marginTop -\n        parsedDimensions.marginBottom,\n      0\n    ),\n    boundedWidth: Math.max(\n      parsedDimensions.width -\n        parsedDimensions.marginLeft -\n        parsedDimensions.marginRight,\n      0\n    ),\n  };\n};\n\nexport const useResizeChart = () => {\n  const ref = useRef<HTMLDivElement | null>(null);\n\n  const [width, setWidth] = useState(initialDimensions.width);\n  const [height, setHeight] = useState(initialDimensions.height);\n\n  useEffect(() => {\n    const resizeObserver = new ResizeObserver((entries) => {\n      if (!Array.isArray(entries) || !entries.length) {\n        return;\n      }\n\n      const entry = entries[0];\n      if (width !== entry.contentRect.width) {\n        setWidth(entry.contentRect.width);\n      }\n\n      if (height !== entry.contentRect.height) {\n        setHeight(entry.contentRect.height);\n      }\n    });\n\n    if (ref.current) {\n      const element = ref.current;\n      resizeObserver.observe(element);\n\n      return () => resizeObserver.unobserve(element);\n    }\n\n    return () => null;\n  }, [height, width]);\n\n  const newChartDimensions = combineChartDimensions({\n    ...initialDimensions,\n    width,\n    height,\n  });\n\n  return { ref, dimensions: newChartDimensions };\n};\n","import { Col, Row, Space, Typography } from 'antd';\n\nimport { ReactElement } from 'react';\nimport { useResizeChart } from '../hooks/useResizeChart';\n\nconst { Text } = Typography;\n\nexport interface PageLayoutProps {\n  pageTitle: string;\n  generateChart: (dimensions: {\n    width: number;\n    height: number;\n  }) => ReactElement;\n  description?: ReactElement;\n  menuItems?: ReactElement;\n  showDescriptionTitle?: boolean;\n}\n\nexport const PageLayout: React.FC<PageLayoutProps> = ({\n  pageTitle,\n  menuItems,\n  description,\n  generateChart,\n  showDescriptionTitle = true,\n}) => {\n  const { ref, dimensions } = useResizeChart();\n\n  return (\n    <div style={{ width: '100%' }} ref={ref}>\n      <Space direction=\"vertical\" size=\"large\" style={{ width: '100%' }}>\n        <Row style={{ width: '100%' }} justify=\"space-between\" gutter={[0, 24]}>\n          <Col xs={7}>\n            <Text strong style={{ fontSize: 32 }}>\n              {pageTitle}\n            </Text>\n          </Col>\n          <Col xs={13}>{menuItems}</Col>\n        </Row>\n        {generateChart(dimensions)}\n        <Space direction=\"vertical\">\n          {showDescriptionTitle && (\n            <Text strong style={{ fontSize: 24 }}>\n              Description\n            </Text>\n          )}\n          <Text style={{ fontSize: 14 }}>{description}</Text>\n        </Space>\n      </Space>\n    </div>\n  );\n};\n","export const Constants = {\n  minWageUrl:\n    'https://gist.github.com/apetit2/212a7cd715f8ba34eb637d014fffb12f',\n  rentUrl: 'https://gist.github.com/apetit2/aaa39169ab48ff313cfb2bfe12486fef',\n} as const;\n","import {\n  useUSMapQuery,\n  useWorldMapQuery,\n} from '../../../services/hooks/useQuery';\n\nimport { Loading } from '../../Loading/Loading';\nimport { Map } from '../../../services/models/maps';\nimport { ReactElement } from 'react';\nimport { Typography } from 'antd';\n\nconst { Text } = Typography;\n\nexport const useGeospatialChart: (type: 'world' | 'us') => {\n  data: Map;\n  fallback: ReactElement | undefined;\n} = (type = 'world') => {\n  const {\n    data: worldData,\n    isError: isWorldDataError,\n    isLoading: isWorldDataLoading,\n  } = useWorldMapQuery();\n\n  const {\n    data: usData,\n    isError: isUSDataError,\n    isLoading: isUSDataLoading,\n  } = useUSMapQuery();\n\n  const isLoading = isWorldDataLoading || isUSDataLoading;\n  const isError = isWorldDataError || isUSDataError;\n  const data = type === 'world' ? worldData : usData;\n\n  let fallback: ReactElement | undefined;\n  if (isLoading) {\n    fallback = <Loading />;\n  }\n\n  if (isError || !data) {\n    fallback = <Text>Some error</Text>;\n  }\n\n  return {\n    data: data!,\n    fallback,\n  };\n};\n","/* eslint-disable @typescript-eslint/no-unused-vars */\n/* eslint-disable react/no-array-index-key */\nimport {\n  GeoPath,\n  GeoProjection,\n  extent,\n  geoAlbersUsa,\n  geoMercator,\n  geoPath,\n  interpolateBlues,\n  scaleSequential,\n} from 'd3';\nimport { USMap, WorldMap } from '../../services/models/maps';\n\nimport { CSVRow } from '../../services/models/shared';\nimport { Hurricane } from '../../services/models/hurricane';\nimport { MinimumWage } from '../../services/models/minimumWage';\nimport { feature } from 'topojson-client';\nimport { useGeospatialChart } from './hooks/useGeospatialChart';\nimport { usePanAndZoom } from './hooks/usePanAndZoom';\nimport { useRef } from 'react';\n\nexport interface GeospatialChartProps {\n  width: number;\n  height: number;\n  rows: CSVRow[];\n  year?: number;\n}\n\nexport const GeospatialChart: React.FC<GeospatialChartProps> = ({\n  width,\n  height,\n  rows,\n  year,\n}) => {\n  const { rowType } = rows[0];\n  const type = rowType === 'Hurricane' ? 'world' : 'us';\n\n  const ref = useRef<SVGSVGElement>(null);\n  const { data, fallback } = useGeospatialChart(type);\n\n  usePanAndZoom(ref, height, type);\n\n  if (fallback) {\n    return fallback;\n  }\n\n  let projection: GeoProjection;\n  let path: GeoPath;\n  let features;\n  if (type === 'world') {\n    const worldData = data as WorldMap;\n    projection = geoMercator().center([0, 15]).scale(200).rotate([-100, 0]);\n    path = geoPath().projection(projection);\n    features = feature(worldData, worldData.objects.countries).features;\n  } else {\n    const usData = data as USMap;\n    projection = geoAlbersUsa()\n      .translate([width / 3, height / 2])\n      .scale(800);\n    path = geoPath().projection(projection);\n    features = feature(usData, usData.objects.states).features;\n  }\n\n  let coords: [number, number][] = [];\n  if (rowType === 'Hurricane') {\n    coords = (rows as Hurricane[]).map((row) => [\n      row.longitude as number,\n      row.latitude as number,\n    ]) as [number, number][];\n  }\n\n  let minWages: { state: string; minWage: number; color: string }[];\n  if (rowType === 'MinWage') {\n    const filteredYear = (rows as MinimumWage[]).filter(\n      (row) => row.year === year\n    );\n\n    const colorSaturationScale = scaleSequential()\n      .domain(\n        extent(filteredYear, (minimumWage) => {\n          return minimumWage.effectiveMinWageTodayDollars;\n        }) as [number, number]\n      )\n      .interpolator(interpolateBlues);\n\n    minWages = filteredYear.reduce((acc, current) => {\n      acc.push({\n        state: current.state ?? '',\n        minWage: Number(current.effectiveMinWageTodayDollars),\n        color: colorSaturationScale(\n          Number(current.effectiveMinWageTodayDollars)\n        ),\n      });\n      return acc;\n    }, [] as { state: string; minWage: number; color: string }[]);\n  }\n\n  return (\n    <div\n      style={{\n        width,\n        height,\n        display: 'grid',\n        overflowX: 'auto',\n        justifyContent: 'center',\n      }}\n    >\n      <svg height={height} width={1100} ref={ref}>\n        {type === 'world' && (\n          <g id=\"countries\">\n            {features.map((value, index) => (\n              <path\n                key={index}\n                d={path(value) as string}\n                stroke=\"#FFFFFF\"\n                strokeWidth={0.5}\n              />\n            ))}\n            {coords.map((value, index) => (\n              <circle\n                key={index}\n                cx={projection(value)?.[0] ?? 0}\n                cy={projection(value)?.[1] ?? 0}\n                r={1}\n              />\n            ))}\n          </g>\n        )}\n        {type === 'us' && (\n          <g id=\"states\">\n            {features.map((value, index) => (\n              <path\n                key={index}\n                d={path(value) as string}\n                stroke=\"black\"\n                strokeWidth={0.5}\n                fill={\n                  minWages!.find((el) => el.state === value.properties.name)\n                    ?.color ?? 'green'\n                }\n              />\n            ))}\n          </g>\n        )}\n      </svg>\n    </div>\n  );\n};\n","import { select, zoom } from 'd3';\n\nimport { useEffect } from 'react';\n\nexport const usePanAndZoom = (\n  ref: React.RefObject<SVGSVGElement>,\n  height: number,\n  type: 'us' | 'world'\n) => {\n  useEffect(() => {\n    if (ref.current) {\n      const svgZoom = zoom<SVGSVGElement, unknown>();\n\n      svgZoom.on('zoom', (event) =>\n        select('#countries').attr('transform', event.transform)\n      );\n\n      if (type === 'world') {\n        svgZoom.scaleExtent([1, 8]);\n        svgZoom.translateExtent([\n          [-300, 50],\n          [1100, height],\n        ]);\n      } else {\n        svgZoom.scaleExtent([1, 8]);\n        svgZoom.translateExtent([\n          [0, 50],\n          [1100, height],\n        ]);\n      }\n\n      select(ref.current).call(svgZoom);\n    }\n  }, [ref, height, type]);\n};\n","import { Slider, Space, Typography } from 'antd';\n\nconst { Text } = Typography;\n\nexport interface YearSelectorProps {\n  minYear: number;\n  maxYear: number;\n  onChange: (year: number) => void;\n}\n\nexport const YearSelector: React.FC<YearSelectorProps> = ({\n  minYear,\n  maxYear,\n  onChange,\n}) => {\n  return (\n    <Space style={{ width: '100%' }} direction=\"vertical\">\n      <Text strong>Select Date:</Text>\n      <Slider min={minYear} max={maxYear} onAfterChange={onChange} />\n    </Space>\n  );\n};\n","import {\n  GeospatialChart,\n  YearSelector,\n} from '../../../components/GeospatialChart';\n\nimport { Constants } from '../constants';\nimport { Link } from 'react-router-dom';\nimport { MinimumWage } from '../../../services/models/minimumWage';\nimport { PageLayout } from '../../../layout/PageLayout';\nimport { Typography } from 'antd';\nimport { useFallback } from '../../../hooks/useFallback';\nimport { useMinimumWageQuery } from '../../../services/hooks/useQuery';\nimport { useState } from 'react';\n\nexport interface GeospatialChartPageProps {}\n\nconst { Text } = Typography;\n\nexport const GeospatialChartPage: React.FC<GeospatialChartPageProps> = () => {\n  const { data, isError, isLoading } = useMinimumWageQuery();\n  const [selectedYear, setSelectedYear] = useState(1968);\n\n  const { fallback } = useFallback<MinimumWage>(isLoading, isError, data);\n\n  // for error / loading states\n  if (fallback || !data) {\n    return fallback;\n  }\n\n  const description = (\n    <>\n      <Text>\n        A geospatial chart depicting effective minimum wage data for all U.S\n        states and territories since 1968. It visualizes data supplied by the\n        U.S Department of Labor. All data can be found in the{' '}\n        <Link to={{ pathname: Constants.minWageUrl }} target=\"_blank\">\n          Minimum Wage Dataset\n        </Link>\n        .\n      </Text>\n      <ul>\n        <li>Dollar amounts shown are in 2020 dollars.</li>\n        <li>Darker state colors represent higher minimum wages.</li>\n      </ul>\n    </>\n  );\n\n  return (\n    <PageLayout\n      pageTitle=\"Minimum Wage Geospatial Chart\"\n      menuItems={\n        <YearSelector\n          minYear={data[0].year!}\n          maxYear={data[data.length - 1].year!}\n          onChange={setSelectedYear}\n        />\n      }\n      generateChart={({ width }) => (\n        <GeospatialChart\n          width={width}\n          height={400}\n          rows={data}\n          year={selectedYear}\n        />\n      )}\n      description={description}\n    />\n  );\n};\n"],"sourceRoot":""}