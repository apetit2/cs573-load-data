{"version":3,"sources":["services/apis.ts","services/lib/maps.ts","services/lib/avocado.ts","services/lib/hurricane.ts","util/inflation.ts","services/lib/minimumWage.ts","services/hooks/useQuery.tsx","hooks/useFallback.tsx","hooks/useResizeChart.tsx","layout/PageLayout.tsx","components/AnimatedGroup/AnimatedGroup.tsx","services/models/minimumWage.ts","components/LineChart/AxisBottom.tsx","components/LineChart/AxisLeft.tsx","components/LineChart/LineChart.tsx","components/LineChart/LineChartAxes.tsx","pages/MinimumWage/LineChartLookUpPage/LineChartLookUpPage.tsx"],"names":["BASE_URL","API","MinimumWageCSV","AvocadoCSV","HurricaneCSV","RentCSV","WorldMap","USMap","fetchWorldMap","a","fetch","json","worldMap","fetchUSMap","usMap","parseCSV","row","index","columns","date","parse","Date","averagePrice","Number","AveragePrice","totalVolume","totalBags","smallBags","largeBags","xLargeBags","type","year","region","month","getMonth","day","getDate","rowType","fetchAvocadoCSV","csv","avocadoCSV","filter","convertLatLong","lat","direction","slice","coordinate","refinedCoordinate","id","ID","name","Name","time","event","Event","status","Status","latitude","Latitude","longitude","Longitude","maxWind","minPressure","lowWindNE","lowWindSE","lowWindSW","lowWindNW","moderateWindNE","moderateWindSE","moderateWindSW","moderateWindNW","highWindNE","highWindSE","highWindSW","highWindNW","getFullYear","fetchHurricaneCSV","hurricaneCSV","accountForInflation","fromCPI","dollars","parseMinimumCsv","Year","state","State","stateMinWage","stateMinWageTodayDollars","federalMinWage","federalMinWageTodayDollars","effectiveMinWage","effectiveMinWageTodayDollars","cpiAverage","depLaborUncleanData","depLaborCleanedLowValue","depLaborCleanedLowValueTodayDollars","depLaborCleanedHighValue","depLaborCleanedHighValueTodayDollars","footnote","Footnote","parseRentCsv","studio","oneBedroom","twoBedroom","threeBedroom","fourBedroom","population","Population","merge","rents","minWages","map","minWage","rent","find","fetchMinimumWageCSV","useMinimumWageQuery","options","useQuery","useAvocadoQuery","useHurricaneQuery","useWorldMapQuery","useUSMapQuery","Text","Typography","useFallback","isLoading","isError","data","fallback","strong","style","color","initialDimensions","height","width","marginTop","marginRight","marginBottom","marginLeft","useResizeChart","ref","useRef","useState","setWidth","setHeight","useEffect","resizeObserver","ResizeObserver","entries","Array","isArray","length","entry","contentRect","current","element","observe","unobserve","newChartDimensions","dimensions","parsedDimensions","boundedHeight","Math","max","boundedWidth","combineChartDimensions","PageLayout","pageTitle","menuItems","description","generateChart","showDescriptionTitle","size","justify","gutter","xs","fontSize","AnimatedGroup","forwardRef","children","rest","opacity","useSpring","from","delay","g","MinimumWageCols","AxisBottom","xScale","tickOffset","ticks","tick","stroke","transform","y2","dy","textAnchor","y","AxisLeft","yScale","x2","x","filterData","grouping","brushExtent","lines","rowIndex","undefined","toLowerCase","sort","rowOne","rowTwo","localeCompare","forEach","arr","push","LineChart","margin","xLabel","yLabel","strokeWidth","focusable","setBrushExtent","brushRef","xValue","useCallback","yValue","colorValue","brushedSectionHeight","useMemo","yRange","extent","xRange","focusXRange","paddedHeight","top","bottom","paddedWidth","left","right","scaleLinear","domain","range","nice","focusXScale","focusYScale","colorScale","uniqueOrdinalValues","Set","numUniqueOrdinalValues","colors","_","interpolateTurbo","scaleOrdinal","marginsForAxes","toString","yAxisLabelOffset","drawLines","line","curve","curveBasis","drawFocus","brush","brushX","select","on","selection","invert","focusLines","className","toDrawLine","d","fill","Option","Select","LineChartAxes","selectedX","selectedY","selectedGrouping","selectedFilter","onSelectX","onSelectY","onSelectGrouping","onSelectFilter","labels","uniqueGroupValues","numericOptions","Object","col","stringOptions","sm","md","lg","maxWidth","defaultValue","onChange","key","value","LineChartLookUpPage","useParams","xAxisLabel","yAxisLabel"],"mappings":"6UAAMA,EAAW,8CAEJC,EAAM,CACjBC,eAAe,GAAD,OAAKF,EAAL,uGACdG,WAAW,GAAD,OAAKH,EAAL,6FACVI,aAAa,GAAD,OAAKJ,EAAL,6FACZK,QAAQ,GAAD,OAAKL,EAAL,0FACPM,SAAU,sDACVC,MAAO,oDCJIC,EAAa,uCAAG,4BAAAC,EAAA,sEACIC,MAAMT,EAAIK,UADd,8BACyBK,OADzB,cACrBC,EADqB,yBAEpBA,GAFoB,2CAAH,qDAKbC,EAAU,uCAAG,4BAAAJ,EAAA,sEACIC,MAAMT,EAAIM,OADd,8BACsBI,OADtB,cAClBG,EADkB,yBAEjBA,GAFiB,2CAAH,qD,kBCFjBC,EAIS,SAACC,EAAKC,EAAOC,GAAa,IAAD,EAChCC,EAAOC,YAAK,UAACJ,EAAIK,YAAL,QAAa,GAAI,aAAc,IAAIA,MACrD,MAAO,CACLF,KAAMH,EAAIK,KACVC,aAAcC,OAAOP,EAAIQ,cACzBC,YAAaF,OAAOP,EAAI,iBACxB,KAAQO,OAAOP,EAAI,OACnB,KAAQO,OAAOP,EAAI,OACnB,KAAQO,OAAOP,EAAI,OACnBU,UAAWH,OAAOP,EAAI,eACtBW,UAAWJ,OAAOP,EAAI,eACtBY,UAAWL,OAAOP,EAAI,eACtBa,WAAYN,OAAOP,EAAI,gBACvBc,KAAMd,EAAIc,KACVC,KAAMR,OAAOP,EAAIe,MACjBC,OAAQhB,EAAIgB,OACZC,MAAOd,EAAKe,WAAa,EACzBC,IAAKhB,EAAKiB,UACVC,QAAS,YAIAC,EAAe,uCAAG,4BAAA7B,EAAA,sEACH8B,YAAItC,EAAIE,WAAYY,GADjB,cACvByB,EADuB,OAC4BC,QACvD,SAACzB,GAAD,OAAsB,IAAbA,EAAIe,QAFc,kBAItBS,GAJsB,2CAAH,qDC1BtBE,EAAiB,SAACC,GACtB,IAAMC,EAAS,OAAGD,QAAH,IAAGA,OAAH,EAAGA,EAAKE,OAAO,GACxBC,EAAavB,OAAM,OAACoB,QAAD,IAACA,OAAD,EAACA,EAAKE,MAAM,GAAI,IACrCE,EAAoB,EACxB,OAAQH,GACN,IAAK,IACL,IAAK,IACHG,EAAoBxB,OAAOuB,IAAe,EAC1C,MACF,QACEC,EAAoBxB,OAAOuB,GAG/B,OAAOC,GAGHhC,EAIW,SAACC,EAAKC,EAAOC,GAAa,IAAD,EAClCC,EAAOC,YAAK,UAACJ,EAAIK,YAAL,QAAa,GAAI,WAAY,IAAIA,MAEnD,MAAO,CACL2B,GAAIhC,EAAIiC,GACRC,KAAMlC,EAAImC,KACVhC,KAAMH,EAAIK,KACV+B,KAAM7B,OAAOP,EAAIoC,MACjBC,MAAOrC,EAAIsC,MACXC,OAAQvC,EAAIwC,OACZC,SAAUf,EAAe1B,EAAI0C,UAC7BC,UAAWjB,EAAe1B,EAAI4C,WAC9BC,QAAStC,OAAOP,EAAI,iBACpB8C,YAAavC,OAAOP,EAAI,qBACxB+C,UAAWxC,OAAOP,EAAI,gBACtBgD,UAAWzC,OAAOP,EAAI,gBACtBiD,UAAW1C,OAAOP,EAAI,gBACtBkD,UAAW3C,OAAOP,EAAI,gBACtBmD,eAAgB5C,OAAOP,EAAI,qBAC3BoD,eAAgB7C,OAAOP,EAAI,qBAC3BqD,eAAgB9C,OAAOP,EAAI,qBAC3BsD,eAAgB/C,OAAOP,EAAI,qBAC3BuD,WAAYhD,OAAOP,EAAI,iBACvBwD,WAAYjD,OAAOP,EAAI,iBACvByD,WAAYlD,OAAOP,EAAI,iBACvB0D,WAAYnD,OAAOP,EAAI,iBACvBe,KAAMZ,EAAKwD,cACX1C,MAAOd,EAAKe,WAAa,EACzBC,IAAKhB,EAAKiB,UACVC,QAAS,cAIAuC,EAAiB,uCAAG,4BAAAnE,EAAA,sEACJ8B,YAAItC,EAAIG,aAAcW,GADlB,cACzB8D,EADyB,yBAExBA,GAFwB,2CAAH,qD,SC1DjBC,EAAsB,SAACC,EAAiBC,GACnD,OAAQA,EAAUD,EAHF,QCMZE,EAIa,SAACjE,GAClB,MAAO,CACLe,KAAMR,OAAOP,EAAIkE,MACjBC,MAAOnE,EAAIoE,MACXC,aAAc9D,OAAOP,EAAI,uBACzBsE,yBAA0B/D,OAAOP,EAAI,oCACrCuE,eAAgBhE,OAAOP,EAAI,yBAC3BwE,2BAA4BjE,OAC1BP,EAAI,sCAENyE,iBAAkBlE,OAAOP,EAAI,2BAC7B0E,6BAA8BnE,OAC5BP,EAAI,wCAEN2E,WAAYpE,OAAOP,EAAI,gBACvB4E,oBAAqB5E,EAAI,sCACzB6E,wBAAyBtE,OACvBP,EAAI,0CAEN8E,oCAAqCvE,OACnCP,EAAI,uDAEN+E,yBAA0BxE,OACxBP,EAAI,2CAENgF,qCAAsCzE,OACpCP,EAAI,wDAENiF,SAAUjF,EAAIkF,SACd7D,QAAS,YAIP8D,EAIM,SAACnF,GACX,MAAO,CACLmE,MAAOnE,EAAIoE,MACXrD,KAAMR,OAAOP,EAAIkE,MACjBkB,OAAQ7E,OAAOP,EAAI,cACnBqF,WAAY9E,OAAOP,EAAI,cACvBsF,WAAY/E,OAAOP,EAAI,cACvBuF,aAAchF,OAAOP,EAAI,cACzBwF,YAAajF,OAAOP,EAAI,cACxByF,WAAYlF,OAAOP,EAAI0F,YACvBrE,QAAS,SAIPsE,EAAQ,SACZC,EACAC,GAyBA,OAvBYA,EAASC,KAAI,SAACC,GACxB,IAAMC,EAAOJ,EAAMK,MACjB,SAACjG,GAAD,OAASA,EAAIe,OAASgF,EAAQhF,MAAQf,EAAImE,QAAU4B,EAAQ5B,SAG9D,OAAK6B,EAIE,2BACFD,GADL,IAEEX,OAAQtB,EAAoBiC,EAAQpB,WAAaqB,EAAKZ,QACtDC,WAAYvB,EAAoBiC,EAAQpB,WAAaqB,EAAKX,YAC1DC,WAAYxB,EAAoBiC,EAAQpB,WAAaqB,EAAKV,YAC1DC,aAAczB,EACZiC,EAAQpB,WACRqB,EAAKT,cAEPC,YAAa1B,EAAoBiC,EAAQpB,WAAaqB,EAAKR,aAC3DC,WAAYO,EAAKP,aAbVM,MAoBAG,EAAmB,uCAAG,8BAAAzG,EAAA,sEACV8B,YAAItC,EAAIC,eAAgB+E,GADd,cAC3B4B,EAD2B,gBAEbtE,YAAItC,EAAII,QAAS8F,GAFJ,cAE3BS,EAF2B,yBAI1BD,EAAMC,EAAOC,IAJa,2CAAH,qDC/E1BM,EAAsB,SAC1BC,GAD0B,OAG1BC,YACE,UACAH,EACAE,IAMEE,EAAkB,SACtBF,GADsB,OAGtBC,YAAyC,UAAW/E,EAAiB8E,IAEjEG,EAAoB,SACxBH,GADwB,OAGxBC,YACE,YACAzC,EACAwC,IAGEI,EAAmB,SAACJ,GAAD,OACvBC,YAA0B,WAAY7G,EAAe4G,IAEjDK,EAAgB,SAACL,GAAD,OACpBC,YAAuB,QAASxG,EAAYuG,K,iCCxC9C,+DAGQM,EAASC,IAATD,KAEKE,EAAc,SACzBC,EACAC,EACAC,GAEA,IAAIC,EAAW,KAkBf,OAhBIF,IACFE,EACE,cAACN,EAAD,CAAMO,QAAM,EAACC,MAAO,CAAEC,MAAO,OAA7B,sCAMAN,IACFG,EAAW,cAAC,IAAD,KAGRD,GAASF,IACZG,EAAW,cAACN,EAAD,CAAMO,QAAM,EAAZ,6BAGN,CAAED,c,6ICZLI,EAAoB,CACxBC,OAAQ,IACRC,MAAO,EACPC,UAAW,GACXC,YAAa,GACbC,aAAc,GACdC,WAAY,IA+BDC,EAAiB,WAC5B,IAAMC,EAAMC,iBAA8B,MAE1C,EAA0BC,mBAASV,EAAkBE,OAArD,mBAAOA,EAAP,KAAcS,EAAd,KACA,EAA4BD,mBAASV,EAAkBC,QAAvD,mBAAOA,EAAP,KAAeW,EAAf,KAEAC,qBAAU,WACR,IAAMC,EAAiB,IAAIC,KAAe,SAACC,GACzC,GAAKC,MAAMC,QAAQF,IAAaA,EAAQG,OAAxC,CAIA,IAAMC,EAAQJ,EAAQ,GAClBd,IAAUkB,EAAMC,YAAYnB,OAC9BS,EAASS,EAAMC,YAAYnB,OAGzBD,IAAWmB,EAAMC,YAAYpB,QAC/BW,EAAUQ,EAAMC,YAAYpB,YAIhC,GAAIO,EAAIc,QAAS,CACf,IAAMC,EAAUf,EAAIc,QAGpB,OAFAR,EAAeU,QAAQD,GAEhB,kBAAMT,EAAeW,UAAUF,IAGxC,OAAO,kBAAM,QACZ,CAACtB,EAAQC,IAEZ,IAAMwB,EA5DuE,SAC7EC,GAEA,IAAMC,EAAgB,2BACjBD,GADiB,IAEpBxB,UAAWwB,EAAWxB,WAAa,GACnCC,YAAauB,EAAWvB,aAAe,GACvCC,aAAcsB,EAAWtB,cAAgB,GACzCC,WAAYqB,EAAWrB,YAAc,KAGvC,OAAO,2BACFsB,GADL,IAEEC,cAAeC,KAAKC,IAClBH,EAAiB3B,OACf2B,EAAiBzB,UACjByB,EAAiBvB,aACnB,GAEF2B,aAAcF,KAAKC,IACjBH,EAAiB1B,MACf0B,EAAiBtB,WACjBsB,EAAiBxB,YACnB,KAqCuB6B,CAAuB,2BAC7CjC,GAD4C,IAE/CE,QACAD,YAGF,MAAO,CAAEO,MAAKmB,WAAYD,I,OCxFpBpC,EAASC,IAATD,KAaK4C,EAAwC,SAAC,GAM/C,IALLC,EAKI,EALJA,UACAC,EAII,EAJJA,UACAC,EAGI,EAHJA,YACAC,EAEI,EAFJA,cAEI,IADJC,4BACI,SACJ,EAA4BhC,IAApBC,EAAR,EAAQA,IAAKmB,EAAb,EAAaA,WAEb,OACE,qBAAK7B,MAAO,CAAEI,MAAO,QAAUM,IAAKA,EAApC,SACE,eAAC,IAAD,CAAOhG,UAAU,WAAWgI,KAAK,QAAQ1C,MAAO,CAAEI,MAAO,QAAzD,UACE,eAAC,IAAD,CAAKJ,MAAO,CAAEI,MAAO,QAAUuC,QAAQ,gBAAgBC,OAAQ,CAAC,EAAG,IAAnE,UACE,cAAC,IAAD,CAAKC,GAAI,EAAT,SACE,cAACrD,EAAD,CAAMO,QAAM,EAACC,MAAO,CAAE8C,SAAU,IAAhC,SACGT,MAGL,cAAC,IAAD,CAAKQ,GAAI,GAAT,SAAcP,OAEfE,EAAcX,GACf,eAAC,IAAD,CAAOnH,UAAU,WAAjB,UACG+H,GACC,cAACjD,EAAD,CAAMO,QAAM,EAACC,MAAO,CAAE8C,SAAU,IAAhC,yBAIF,cAACtD,EAAD,CAAMQ,MAAO,CAAE8C,SAAU,IAAzB,SAAgCP,c,+HCtC7BQ,EAAgBC,sBAC3B,WAAwBtC,GAAS,IAA9BuC,EAA6B,EAA7BA,SAAaC,EAAgB,iBACtBC,EAAYC,oBAAU,CAC5BD,QAAS,EACTE,KAAM,CAAEF,QAAS,GACjBG,MAAO,MAHDH,QAMR,OACE,cAAC,WAASI,EAAV,yBAAY7C,IAAKA,GAASwC,GAA1B,IAAgCC,QAASA,EAAzC,SACGF,S,iCCoBT,kCAAO,IAAMO,EAAkB,CAC7B3J,KAAM,OACNoD,MAAO,QACPE,aAAc,qBACdC,yBAA0B,oCAC1BC,eAAgB,uBAChBC,2BAA4B,sCAC5BC,iBAAkB,yBAClBC,6BAA8B,wCAC9BC,WAAY,+BACZC,oBAAqB,6BACrBC,wBAAyB,kCACzBC,oCACE,iDACFC,yBAA0B,mCAC1BC,qCACE,kDACFC,SAAU,WACVG,OAAQ,gCACRC,WAAY,qCACZC,WAAY,qCACZC,aAAc,uCACdC,YAAa,sCACbC,WAAY,e,kJCpDDkF,EAAmC,SAAC,GAI1C,IAHLC,EAGI,EAHJA,OACAvD,EAEI,EAFJA,OAEI,IADJwD,kBACI,MADS,EACT,EACJ,OACE,mCACGD,EAAOE,QAAQhF,KAAI,SAACiF,GAAD,OAClB,oBACE7D,MAAO,CAAE8D,OAAQ,WAEjBC,UAAS,oBAAeL,EAAOG,GAAtB,QAHX,UAKE,sBAAMG,GAAI7D,IACV,sBAAM8D,GAAG,QAAQC,WAAW,SAASC,EAAGhE,EAASwD,EAAjD,SACGE,MALEA,SCVFO,EAAoC,SAAC,GAAD,IAC/CC,EAD+C,EAC/CA,OACAjE,EAF+C,EAE/CA,MAF+C,IAG/CuD,kBAH+C,MAGlC,EAHkC,SAK/C,mCACGU,EAAOT,QAAQhF,KAAI,SAACiF,GAAD,OAClB,oBAEE7D,MAAO,CAAE8D,OAAQ,WACjBC,UAAS,sBAAiBM,EAAOR,GAAxB,KAHX,UAKE,sBAAMS,GAAIlE,IACV,sBAAM8D,WAAW,MAAMK,GAAIZ,EAAYM,GAAG,QAA1C,SACGJ,MANEA,S,SC+BPW,EAAa,SACjB3E,EACA4E,EACAlK,EACAmK,EACAH,GAEA,IAAMI,EAAe,GACjBC,EAAW,EAqCf,OAnCA/E,EACGtF,QAAO,SAACzB,GACP,OAAI4L,GAAeH,QAEHM,IAAXtK,GACEzB,EAAI2L,GAAqBK,gBAAkBvK,EAAOuK,gBACpDhM,EAAIyL,IAAiBG,EAAY,IACjC5L,EAAIyL,IAAiBG,EAAY,QAKzBG,IAAXtK,GACCzB,EAAI2L,GAAqBK,gBAAkBvK,EAAOuK,iBAGtDC,MAAK,SAACC,EAAQC,GACb,OAAQD,EAAOP,GAAqBS,cAClCD,EAAOR,OAGVU,SAAQ,SAACrM,EAAKC,EAAOqM,GAElBrM,GAAS,GACRD,EAAI2L,KAA0BW,EAAIrM,EAAQ,GAAG0L,IAE9CE,EAAMU,KAAK,CAACvM,IACZ8L,GAAY,GACO,IAAV7L,EACT4L,EAAMU,KAAK,CAACvM,IAEZ6L,EAAMC,GAAUS,KAAKvM,MAIpB6L,GAGIW,EAAY,YAeoB,IAd3C/K,EAc0C,EAd1CA,OACAkK,EAa0C,EAb1CA,SACArE,EAY0C,EAZ1CA,MAY0C,IAX1CD,cAW0C,MAXjC,IAWiC,EAV1CoF,EAU0C,EAV1CA,OACAhB,EAS0C,EAT1CA,EACAJ,EAQ0C,EAR1CA,EACAqB,EAO0C,EAP1CA,OACAC,EAM0C,EAN1CA,OACA5F,EAK0C,EAL1CA,KAK0C,IAJ1CsD,eAI0C,MAJhC,KAIgC,MAH1CuC,mBAG0C,MAH5B,EAG4B,EAF1C5B,EAE0C,EAF1CA,OAE0C,IAD1C6B,iBAC0C,SAC1C,EAAsC/E,qBAAtC,mBAAO8D,EAAP,KAAoBkB,EAApB,KACMC,EAAWlF,iBAAoB,MAE/BmF,EAASC,uBAAY,SAACjN,GAAD,OAAYA,EAAIyL,KAAc,CAACA,IACpDyB,EAASD,uBAAY,SAACjN,GAAD,OAAYA,EAAIqL,KAAc,CAACA,IACpD8B,EAAaF,uBACjB,SAACjN,GAAD,OAAYA,EAAI2L,KAChB,CAACA,IAGGyB,EAAuBC,mBAC3B,iBA7EuB,GA6EIhG,IAC3B,CAACA,IAGGiG,EAASD,mBACb,kBAAME,YAAOxG,EAAMmG,KACnB,CAACnG,EAAMmG,IAEHM,EAASH,mBACb,kBAAME,YAAOxG,EAAMiG,KACnB,CAACjG,EAAMiG,IAEHS,EAAcJ,mBAClB,kBAAME,YAAOxG,EAAMiG,KACnB,CAACjG,EAAMiG,IAGHU,EAAeL,mBACnB,kBAAMhG,EAASoF,EAAOkB,IAAMlB,EAAOmB,SACnC,CAACvG,EAAQoF,IAELoB,EAAcR,mBAClB,kBAAM/F,EAAQmF,EAAOqB,KAAOrB,EAAOsB,QACnC,CAACzG,EAAOmF,IAGJ7B,EAASyC,mBACb,kBACEW,cACGC,OAAOrC,GAAe4B,GACtBU,MAAM,CAAC,EAAGL,IACVM,SACL,CAACN,EAAaL,EAAQ5B,IAElBL,EAAS8B,mBACb,kBAAMW,cAAcC,OAAOX,GAAQY,MAAM,CAACR,EAAc,MACxD,CAACA,EAAcJ,IAEXc,EAAcf,mBAClB,kBAAMW,cAAcC,OAAOR,GAAaS,MAAM,CAAC,EAAGL,IAAcM,SAChE,CAACN,EAAaJ,IAEVY,EAAchB,mBAClB,kBACEW,cACGC,OAAOX,GACPY,MAAM,CA3HY,GA2HX7G,EAA6B,MACzC,CAACiG,EAAQjG,IAGLiH,EAAajB,mBAAQ,WACzB,IAAMkB,EAAsBlG,MAAMkC,KAAK,IAAIiE,IAAIzH,EAAKjB,IAAIqH,KAClDsB,EAAyBF,EAAoBhG,OAE7CmG,EAASH,EAAoBzI,KAAI,SAAC6I,EAAG1O,GACzC,OAAO2O,YAAiB3O,EAAQwO,MAElC,OAAOI,cAAuBZ,OAAOlH,EAAKjB,IAAIqH,IAAae,MAAMQ,KAChE,CAAC3H,EAAMoG,IAEJ2B,EAAiBzB,mBACrB,8BAAC,eACIZ,GADL,IAEEqB,KAAoC,KAA9BR,EAAO,GAAGyB,WAAWxG,OAAgB,OAE7C,CAACkE,EAAQa,IAGL0B,EAAmB3B,mBACvB,kBAAoC,KAA9BC,EAAO,GAAGyB,WAAWxG,OAAgB,KAC3C,CAAC+E,IAGG2B,EAAY5B,mBAAQ,WACxB,OAAO6B,cACJzD,GAAE,SAACzL,GAAD,OAAS4K,EAAOoC,EAAOhN,OACzBqL,GAAE,SAACrL,GAAD,OAASuL,EAAO2B,EAAOlN,OACzBmP,MAAMC,OACR,CAACxE,EAAQW,EAAQ2B,EAAQF,IAEtBqC,EAAYhC,mBAAQ,WACxB,OAAO6B,cACJzD,GAAE,SAACzL,GAAD,OAASoO,EAAYpB,EAAOhN,OAC9BqL,GAAE,SAACrL,GAAD,OAASqO,EAAYnB,EAAOlN,OAC9BmP,MAAMC,OACR,CAAChB,EAAaC,EAAanB,EAAQF,IAEtC/E,qBAAU,WACR,GAAI8E,EAASrE,SAAWmF,EAAc,EAAG,CACvC,IAAMyB,EAAQC,cAAShC,OAAO,CAC5B,CAAC,EAAG,GACJ,CAACM,EAAaT,KAEhBkC,EAAME,YAA6BzC,EAASrE,UAC5C4G,EAAMG,GAAG,aAAa,SAACpN,GACrByK,EACEzK,EAAMqN,WAAarN,EAAMqN,UAAU5J,IAAIsI,EAAYuB,eAIxD,CAAC9B,EAAaT,EAAsBL,EAAUqB,IAEjD,IAAMvC,EAAQwB,mBACZ,kBAAM3B,EAAW3E,EAAM4E,EAAUlK,EAAQmK,EAAaH,KACtD,CAAC1E,EAAM4E,EAAUlK,EAAQmK,EAAaH,IAGlCmE,EAAavC,mBAAQ,WACzB,GAAIR,EACF,OAAOnB,EAAW3E,EAAM4E,EAAUlK,KAGnC,CAACsF,EAAM4E,EAAUlK,EAAQoL,IAE5B,OACE,sBACEvF,MAAOA,EACPD,OAAQwF,EAAYxF,EAlMC,GAkMQA,EAA8B,GAAKA,EAFlE,UAIE,oBAAG4D,UAAS,oBAAe6D,EAAehB,KAA9B,YAAsCgB,EAAenB,IAArD,KAAZ,UACE,cAAC,EAAD,CAAY/C,OAAQA,EAAQvD,OAAQqG,EAAc7C,WAAY,KAE9D,sBACEgF,UAAU,aACVzE,WAAW,SACXH,UAAS,qBAAgB+D,EAAhB,YACPtB,EAAe,EADR,iBAHX,SAOGf,IAGH,cAAC,EAAD,CAAUpB,OAAQA,EAAQjE,MAAOuG,EAAahD,WAAY,KAExDgC,GACA,sBACEgD,UAAU,aACVpE,EAAGoC,EAAc,EACjBxC,EAAGqC,EAxNU,GAyNbtC,WAAW,SAJb,SAMGsB,IAIL,cAACzC,EAAA,EAAD,UACG4B,EAAM/F,KAAI,SAACgK,GAAD,OACT,sBAEEC,EAAGd,EAAUa,GACb9E,OAAQA,GAAUsD,EAAWnB,EAAW2C,EAAW,KACnDlD,YAAaA,EACbvC,QAASA,EACT2F,KAAK,QALAF,EAAW,GAAGnE,YAU1BkB,GACC,eAAC5C,EAAA,EAAD,CACErC,IAAKmF,EACL9B,UAAS,oBAAe6D,EAAehB,KAA9B,aACPzG,EAASoF,EAAOmB,OAASnB,EAAOkB,IAAMP,EAD/B,KAFX,UAME,cAAC,EAAD,CACExC,OAAQwD,EACR/G,OAAQ+F,EACRvC,WAAY,KAThB,OAYG+E,QAZH,IAYGA,OAZH,EAYGA,EAAY9J,KAAI,SAACgK,GAAD,OACf,sBAEEC,EAAGV,EAAUS,GACb9E,OAAQA,GAAUsD,EAAWnB,EAAW2C,EAAW,KACnDlD,YAAaA,EACbvC,QAASA,EACT2F,KAAK,QALAF,EAAW,GAAGnE,c,6CChSzBjF,EAASC,IAATD,KACAuJ,EAAWC,IAAXD,OAgBKE,EAAgB,YAYoB,IAX/CnO,EAW8C,EAX9CA,GACAoO,EAU8C,EAV9CA,UACAC,EAS8C,EAT9CA,UACAC,EAQ8C,EAR9CA,iBACAC,EAO8C,EAP9CA,eACAC,EAM8C,EAN9CA,UACAC,EAK8C,EAL9CA,UACAC,EAI8C,EAJ9CA,iBACAC,EAG8C,EAH9CA,eACA5J,EAE8C,EAF9CA,KACA6J,EAC8C,EAD9CA,OAGMC,EAAoBxI,MAAMkC,KAAK,IAAIiE,IAAIzH,EAAKjB,KAD/B,SAAC9F,GAAD,OAAYA,EAAIsQ,QAEnCO,EAAkBtE,KAAK,OAGvB,IAAMuE,EAAiBC,OAAO3I,QAAQrB,EAAK,IACxCtF,QAAO,SAACuP,GAAD,MAA2B,kBAAXA,EAAI,MAC3BlL,KAAI,SAACkL,GAAD,OAASA,EAAI,MAEdC,EAAgBF,OAAO3I,QAAQrB,EAAK,IACvCtF,QAAO,SAACuP,GAAD,MAA2B,kBAAXA,EAAI,MAC3BlL,KAAI,SAACkL,GAAD,OAASA,EAAI,MAEpB,OACE,eAAC,IAAD,CAAK9J,MAAO,CAAEI,MAAO,QAAUwC,OAAQ,CAAC,GAAI,IAA5C,UACE,cAAC,IAAD,CAAKoH,GAAI,EAAGC,GAAI,EAAGC,GAAI,EAAvB,SACE,eAAC,IAAD,CAAOxP,UAAU,WAAWgI,KAAK,QAAQ1C,MAAO,CAAEI,MAAO,QAAzD,UACE,cAACZ,EAAD,CAAM1E,GAAE,UAAKA,EAAL,iBAAwBiF,QAAM,EAACC,MAAO,CAAE8C,SAAU,IAA1D,qBAGA,cAAC,IAAD,CACE,4BAAoBhI,EAApB,iBACAkF,MAAO,CAAEI,MAAO,OAAQ+J,SAAU,SAClCC,aAAclB,EACdmB,SAAUf,EAJZ,SAMGM,EAAehL,KAAI,SAAC0L,GAAD,OAClB,cAACvB,EAAD,CAAQwB,MAAOD,EAAf,SACGZ,EAAOY,IADeA,aAOjC,cAAC,IAAD,CAAKN,GAAI,EAAGC,GAAI,EAAGC,GAAI,EAAvB,SACE,eAAC,IAAD,CAAOxP,UAAU,WAAWgI,KAAK,QAAQ1C,MAAO,CAAEI,MAAO,QAAzD,UACE,cAACZ,EAAD,CAAMO,QAAM,EAACC,MAAO,CAAE8C,SAAU,IAAhC,qBAGA,cAAC,IAAD,CACE9C,MAAO,CAAEI,MAAO,OAAQ+J,SAAU,SAClCC,aAAcjB,EACdkB,SAAUd,EAHZ,SAKGK,EAAehL,KAAI,SAAC0L,GAAD,OAClB,cAACvB,EAAD,CAAQwB,MAAOD,EAAf,SACGZ,EAAOY,IADeA,aAOjC,cAAC,IAAD,CAAKN,GAAI,EAAGC,GAAI,EAAGC,GAAI,EAAvB,SACE,eAAC,IAAD,CAAOxP,UAAU,WAAWgI,KAAK,QAAQ1C,MAAO,CAAEI,MAAO,QAAzD,UACE,cAACZ,EAAD,CAAMO,QAAM,EAACC,MAAO,CAAE8C,SAAU,IAAhC,uBAGA,cAAC,IAAD,CACE9C,MAAO,CAAEI,MAAO,OAAQ+J,SAAU,SAClCC,aAAchB,EACdiB,SAAUb,EAHZ,SAKGO,EAAcnL,KAAI,SAAC0L,GAAD,OACjB,cAACvB,EAAD,CAAQwB,MAAOD,EAAf,SACGZ,EAAOY,IADeA,aAOjC,cAAC,IAAD,CAAKN,GAAI,EAAGC,GAAI,EAAGC,GAAI,EAAvB,SACE,eAAC,IAAD,CAAOxP,UAAU,WAAWgI,KAAK,QAAQ1C,MAAO,CAAEI,MAAO,QAAzD,UACE,cAACZ,EAAD,CAAMO,QAAM,EAACC,MAAO,CAAE8C,SAAU,IAAhC,qBAGA,cAAC,IAAD,CACE9C,MAAO,CAAEI,MAAO,OAAQ+J,SAAU,SAClCC,aAAcf,EACdgB,SAAUZ,EAHZ,SAKGE,EAAkB/K,KAAI,SAAC0L,GAAD,OACrB,cAACvB,EAAD,CAAQwB,MAAOD,EAAf,SACGA,GADsBA,kB,yJC1G/B9K,EAASC,IAATD,KAIKgL,EAA0D,WACrE,IAAQvN,EAAUwN,cAAVxN,MAER,EAAqCgC,cAA7BY,EAAR,EAAQA,KAAMD,EAAd,EAAcA,QAASD,EAAvB,EAAuBA,UAEfG,EAAaJ,YAAyBC,EAAWC,EAASC,GAA1DC,SAER,GAAIA,IAAaD,EACf,OAAOC,EAGT,IAAM4K,EAAalH,IAAgB3J,KAC7B8Q,EAAanH,IAAgBhG,6BAE7B+E,EACJ,mCACE,cAAC/C,EAAD,iCAIJ,OACE,cAAC4C,EAAA,EAAD,CACEC,UAAS,qCAAgCpF,GACzCsF,YAAaA,EACbC,cAAe,gBAAGpC,EAAH,EAAGA,MAAH,OACb,cAACkF,EAAA,EAAD,CACElF,MAAOA,EACPD,OAAQ,IACRoF,OAAQ,CAAEkB,IAAK,GAAII,MAAO,GAAIH,OAAQ,GAAIE,KAAM,GAChD/G,KAAMA,EACN2F,OAAQkF,EACRjF,OAAQkF,EACRpG,EAAE,OACFJ,EAAE,+BACFM,SAAS,QACTlK,OAAQ0C,EACRkG,QAAQ,KACRuC,YAAa,EACb5B,OAAO","file":"static/js/13.d7e8eb6e.chunk.js","sourcesContent":["const BASE_URL = 'https://gist.githubusercontent.com/apetit2/';\n\nexport const API = {\n  MinimumWageCSV: `${BASE_URL}212a7cd715f8ba34eb637d014fffb12f/raw/0cc5e300ed1747be91ec391f4546e1a44c90d810/minimum-wage-data.csv`,\n  AvocadoCSV: `${BASE_URL}a3a8f61f0c56a1d1448804a584b7c1bb/raw/53be30feacedf088d4b8f609ccc509ca1e52591d/avocado.csv`,\n  HurricaneCSV: `${BASE_URL}5c1aa857558bc646281763252ea13d57/raw/daa565a0dc8c0dd99a63d162efad23037b067678/pacific.csv`,\n  RentCSV: `${BASE_URL}aaa39169ab48ff313cfb2bfe12486fef/raw/6d5308a46301f7f2b08c6974a3be7e7e138434f8/rent.csv`,\n  WorldMap: 'https://unpkg.com/world-atlas@1.1.4/world/110m.json',\n  USMap: 'https://unpkg.com/us-atlas@3.0.0/states-10m.json',\n};\n","import { USMap, WorldMap } from '../models/maps';\n\nimport { API } from '../apis';\n\nexport const fetchWorldMap = async () => {\n  const worldMap = (await (await fetch(API.WorldMap)).json()) as WorldMap;\n  return worldMap;\n};\n\nexport const fetchUSMap = async () => {\n  const usMap = (await (await fetch(API.USMap)).json()) as USMap;\n  return usMap;\n};\n","/* eslint-disable @typescript-eslint/no-unused-vars */\nimport { DSVParsedArray, DSVRowString, csv } from 'd3';\n\nimport { API } from '../apis';\nimport { Avocado } from '../models/avocado';\nimport { parse } from 'date-fns';\n\nconst parseCSV: (\n  row: DSVRowString<string>,\n  index: number,\n  columns: string[]\n) => Avocado = (row, index, columns) => {\n  const date = parse(row.Date ?? '', 'yyyy-MM-dd', new Date());\n  return {\n    date: row.Date,\n    averagePrice: Number(row.AveragePrice),\n    totalVolume: Number(row['Total Volume']),\n    '4046': Number(row['4046']),\n    '4225': Number(row['4225']),\n    '4770': Number(row['4770']),\n    totalBags: Number(row['Total Bags']),\n    smallBags: Number(row['Small Bags']),\n    largeBags: Number(row['Large Bags']),\n    xLargeBags: Number(row['XLarge Bags']),\n    type: row.type,\n    year: Number(row.year),\n    region: row.region,\n    month: date.getMonth() + 1,\n    day: date.getDate(),\n    rowType: 'Avocado',\n  };\n};\n\nexport const fetchAvocadoCSV = async () => {\n  const avocadoCSV = (await csv(API.AvocadoCSV, parseCSV)).filter(\n    (row) => row.year !== 0\n  ) as DSVParsedArray<Avocado>;\n  return avocadoCSV;\n};\n","/* eslint-disable @typescript-eslint/no-unused-vars */\nimport { DSVRowString, csv } from 'd3';\n\nimport { API } from '../apis';\nimport { Hurricane } from '../models/hurricane';\nimport { parse } from 'date-fns';\n\nconst convertLatLong = (lat: string | undefined) => {\n  const direction = lat?.slice(-1);\n  const coordinate = Number(lat?.slice(0, -1));\n  let refinedCoordinate = 0;\n  switch (direction) {\n    case 'W':\n    case 'S':\n      refinedCoordinate = Number(coordinate) / -1;\n      break;\n    default:\n      refinedCoordinate = Number(coordinate);\n  }\n\n  return refinedCoordinate;\n};\n\nconst parseCSV: (\n  row: DSVRowString<string>,\n  index: number,\n  columns: string[]\n) => Hurricane = (row, index, columns) => {\n  const date = parse(row.Date ?? '', 'yyyyMMdd', new Date());\n\n  return {\n    id: row.ID,\n    name: row.Name,\n    date: row.Date,\n    time: Number(row.time),\n    event: row.Event,\n    status: row.Status,\n    latitude: convertLatLong(row.Latitude),\n    longitude: convertLatLong(row.Longitude),\n    maxWind: Number(row['Maximum Wind']),\n    minPressure: Number(row['Minimum Pressure']),\n    lowWindNE: Number(row['Low Wind NE']),\n    lowWindSE: Number(row['Low Wind SE']),\n    lowWindSW: Number(row['Low Wind SW']),\n    lowWindNW: Number(row['Low Wind NW']),\n    moderateWindNE: Number(row['Moderate Wind NE']),\n    moderateWindSE: Number(row['Moderate Wind SE']),\n    moderateWindSW: Number(row['Moderate Wind SW']),\n    moderateWindNW: Number(row['Moderate Wind NW']),\n    highWindNE: Number(row['High Wind NE']),\n    highWindSE: Number(row['High Wind SE']),\n    highWindSW: Number(row['High Wind SW']),\n    highWindNW: Number(row['High Wind NW']),\n    year: date.getFullYear(),\n    month: date.getMonth() + 1,\n    day: date.getDate(),\n    rowType: 'Hurricane',\n  };\n};\n\nexport const fetchHurricaneCSV = async () => {\n  const hurricaneCSV = await csv(API.HurricaneCSV, parseCSV);\n  return hurricaneCSV;\n};\n","const CPI_TODAY = 260.28;\n\nexport const accountForInflation = (fromCPI: number, dollars: number) => {\n  return (dollars * fromCPI) / CPI_TODAY;\n};\n","import { DSVRowString, csv, DSVParsedArray } from 'd3';\nimport { accountForInflation } from '../../util/inflation';\n\nimport { API } from '../apis';\nimport { MinimumWage, Rent } from '../models/minimumWage';\n\nconst parseMinimumCsv: (\n  row: DSVRowString<string>,\n  index: number,\n  columns: string[]\n) => MinimumWage = (row) => {\n  return {\n    year: Number(row.Year),\n    state: row.State,\n    stateMinWage: Number(row['State.Minimum.Wage']),\n    stateMinWageTodayDollars: Number(row['State.Minimum.Wage.2020.Dollars']),\n    federalMinWage: Number(row['Federal.Minimum.Wage']),\n    federalMinWageTodayDollars: Number(\n      row['Federal.Minimum.Wage.2020.Dollars']\n    ),\n    effectiveMinWage: Number(row['Effective.Minimum.Wage']),\n    effectiveMinWageTodayDollars: Number(\n      row['Effective.Minimum.Wage.2020.Dollars']\n    ),\n    cpiAverage: Number(row['CPI.Average']),\n    depLaborUncleanData: row['Department.Of.Labor.Uncleaned.Data'],\n    depLaborCleanedLowValue: Number(\n      row['Department.Of.Labor.Cleaned.Low.Value']\n    ),\n    depLaborCleanedLowValueTodayDollars: Number(\n      row['Department.Of.Labor.Cleaned.Low.Value.2020.Dollars']\n    ),\n    depLaborCleanedHighValue: Number(\n      row['Department.Of.Labor.Cleaned.High.Value']\n    ),\n    depLaborCleanedHighValueTodayDollars: Number(\n      row['Department.Of.Labor.Cleaned.High.Value.2020.Dollars']\n    ),\n    footnote: row.Footnote,\n    rowType: 'MinWage',\n  };\n};\n\nconst parseRentCsv: (\n  row: DSVRowString<string>,\n  index: number,\n  columns: string[]\n) => Rent = (row) => {\n  return {\n    state: row.State,\n    year: Number(row.Year),\n    studio: Number(row['Rent 0 BR']),\n    oneBedroom: Number(row['Rent 1 BR']),\n    twoBedroom: Number(row['Rent 2 BR']),\n    threeBedroom: Number(row['Rent 3 BR']),\n    fourBedroom: Number(row['Rent 4 BR']),\n    population: Number(row.Population),\n    rowType: 'Rent',\n  };\n};\n\nconst merge = (\n  rents: DSVParsedArray<Rent>,\n  minWages: DSVParsedArray<MinimumWage>\n) => {\n  const res = minWages.map((minWage) => {\n    const rent = rents.find(\n      (row) => row.year === minWage.year && row.state === minWage.state\n    );\n\n    if (!rent) {\n      return minWage;\n    }\n\n    return {\n      ...minWage,\n      studio: accountForInflation(minWage.cpiAverage!, rent.studio!),\n      oneBedroom: accountForInflation(minWage.cpiAverage!, rent.oneBedroom!),\n      twoBedroom: accountForInflation(minWage.cpiAverage!, rent.twoBedroom!),\n      threeBedroom: accountForInflation(\n        minWage.cpiAverage!,\n        rent.threeBedroom!\n      ),\n      fourBedroom: accountForInflation(minWage.cpiAverage!, rent.fourBedroom!),\n      population: rent.population,\n    } as MinimumWage;\n  });\n\n  return res as DSVParsedArray<MinimumWage>;\n};\n\nexport const fetchMinimumWageCSV = async () => {\n  const minWages = await csv(API.MinimumWageCSV, parseMinimumCsv);\n  const rents = await csv(API.RentCSV, parseRentCsv);\n\n  return merge(rents, minWages);\n};\n\nexport const fetchRentCSV = async () => {\n  const res = await csv(API.RentCSV, parseRentCsv);\n  return res;\n};\n","import { USMap, WorldMap } from '../models/maps';\nimport { UseQueryOptions, useQuery } from 'react-query';\nimport { fetchUSMap, fetchWorldMap } from '../lib/maps';\n\nimport { Avocado } from '../models/avocado';\nimport { DSVParsedArray } from 'd3-dsv';\nimport { Hurricane } from '../models/hurricane';\nimport { MinimumWage, Rent } from '../models/minimumWage';\nimport { fetchAvocadoCSV } from '../lib/avocado';\nimport { fetchHurricaneCSV } from '../lib/hurricane';\nimport { fetchMinimumWageCSV, fetchRentCSV } from '../lib/minimumWage';\n\nconst useMinimumWageQuery = (\n  options?: UseQueryOptions<DSVParsedArray<MinimumWage>, Error>\n) =>\n  useQuery<DSVParsedArray<MinimumWage>, Error>(\n    'minWage',\n    fetchMinimumWageCSV,\n    options\n  );\n\nconst useRentQuery = (options?: UseQueryOptions<DSVParsedArray<Rent>, Error>) =>\n  useQuery<DSVParsedArray<Rent>, Error>('rent', fetchRentCSV, options);\n\nconst useAvocadoQuery = (\n  options?: UseQueryOptions<DSVParsedArray<Avocado>, Error>\n) =>\n  useQuery<DSVParsedArray<Avocado>, Error>('avocado', fetchAvocadoCSV, options);\n\nconst useHurricaneQuery = (\n  options?: UseQueryOptions<DSVParsedArray<Hurricane>, Error>\n) =>\n  useQuery<DSVParsedArray<Hurricane>, Error>(\n    'hurricane',\n    fetchHurricaneCSV,\n    options\n  );\n\nconst useWorldMapQuery = (options?: UseQueryOptions<WorldMap, Error>) =>\n  useQuery<WorldMap, Error>('worldMap', fetchWorldMap, options);\n\nconst useUSMapQuery = (options?: UseQueryOptions<USMap, Error>) =>\n  useQuery<USMap, Error>('usMap', fetchUSMap, options);\n\nexport {\n  useAvocadoQuery,\n  useHurricaneQuery,\n  useMinimumWageQuery,\n  useWorldMapQuery,\n  useUSMapQuery,\n  useRentQuery,\n};\n","import { CSVRow } from '../services/models/shared';\nimport { DSVParsedArray } from 'd3-dsv';\nimport { Loading } from '../components/Loading/Loading';\nimport { Typography } from 'antd';\n\nconst { Text } = Typography;\n\nexport const useFallback = <T extends CSVRow>(\n  isLoading: boolean,\n  isError: boolean,\n  data?: DSVParsedArray<T>\n) => {\n  let fallback = null;\n\n  if (isError) {\n    fallback = (\n      <Text strong style={{ color: 'red' }}>\n        Failed To Load Dataset.\n      </Text>\n    );\n  }\n\n  if (isLoading) {\n    fallback = <Loading />;\n  }\n\n  if (!data && !isLoading) {\n    fallback = <Text strong>No Data Found.</Text>;\n  }\n\n  return { fallback };\n};\n","// adapted from https://wattenberger.com/blog/react-and-d3\nimport { ResizeObserver } from '@juggle/resize-observer';\nimport { useEffect, useRef, useState } from 'react';\n\ninterface Dimensions {\n  height: number;\n  width: number;\n  marginTop: number;\n  marginRight: number;\n  marginBottom: number;\n  marginLeft: number;\n}\n\ninterface CombinedDimensions extends Dimensions {\n  boundedHeight: number;\n  boundedWidth: number;\n}\n\nconst initialDimensions = {\n  height: 400,\n  width: 0,\n  marginTop: 10,\n  marginRight: 10,\n  marginBottom: 40,\n  marginLeft: 75,\n};\n\nconst combineChartDimensions: (dimensions: Dimensions) => CombinedDimensions = (\n  dimensions\n) => {\n  const parsedDimensions = {\n    ...dimensions,\n    marginTop: dimensions.marginTop || 10,\n    marginRight: dimensions.marginRight || 10,\n    marginBottom: dimensions.marginBottom || 40,\n    marginLeft: dimensions.marginLeft || 75,\n  } as Dimensions;\n\n  return {\n    ...parsedDimensions,\n    boundedHeight: Math.max(\n      parsedDimensions.height -\n        parsedDimensions.marginTop -\n        parsedDimensions.marginBottom,\n      0\n    ),\n    boundedWidth: Math.max(\n      parsedDimensions.width -\n        parsedDimensions.marginLeft -\n        parsedDimensions.marginRight,\n      0\n    ),\n  };\n};\n\nexport const useResizeChart = () => {\n  const ref = useRef<HTMLDivElement | null>(null);\n\n  const [width, setWidth] = useState(initialDimensions.width);\n  const [height, setHeight] = useState(initialDimensions.height);\n\n  useEffect(() => {\n    const resizeObserver = new ResizeObserver((entries) => {\n      if (!Array.isArray(entries) || !entries.length) {\n        return;\n      }\n\n      const entry = entries[0];\n      if (width !== entry.contentRect.width) {\n        setWidth(entry.contentRect.width);\n      }\n\n      if (height !== entry.contentRect.height) {\n        setHeight(entry.contentRect.height);\n      }\n    });\n\n    if (ref.current) {\n      const element = ref.current;\n      resizeObserver.observe(element);\n\n      return () => resizeObserver.unobserve(element);\n    }\n\n    return () => null;\n  }, [height, width]);\n\n  const newChartDimensions = combineChartDimensions({\n    ...initialDimensions,\n    width,\n    height,\n  });\n\n  return { ref, dimensions: newChartDimensions };\n};\n","import { Col, Row, Space, Typography } from 'antd';\n\nimport { ReactElement } from 'react';\nimport { useResizeChart } from '../hooks/useResizeChart';\n\nconst { Text } = Typography;\n\nexport interface PageLayoutProps {\n  pageTitle: string;\n  generateChart: (dimensions: {\n    width: number;\n    height: number;\n  }) => ReactElement;\n  description?: ReactElement;\n  menuItems?: ReactElement;\n  showDescriptionTitle?: boolean;\n}\n\nexport const PageLayout: React.FC<PageLayoutProps> = ({\n  pageTitle,\n  menuItems,\n  description,\n  generateChart,\n  showDescriptionTitle = true,\n}) => {\n  const { ref, dimensions } = useResizeChart();\n\n  return (\n    <div style={{ width: '100%' }} ref={ref}>\n      <Space direction=\"vertical\" size=\"large\" style={{ width: '100%' }}>\n        <Row style={{ width: '100%' }} justify=\"space-between\" gutter={[0, 24]}>\n          <Col xs={7}>\n            <Text strong style={{ fontSize: 32 }}>\n              {pageTitle}\n            </Text>\n          </Col>\n          <Col xs={13}>{menuItems}</Col>\n        </Row>\n        {generateChart(dimensions)}\n        <Space direction=\"vertical\">\n          {showDescriptionTitle && (\n            <Text strong style={{ fontSize: 24 }}>\n              Description\n            </Text>\n          )}\n          <Text style={{ fontSize: 14 }}>{description}</Text>\n        </Space>\n      </Space>\n    </div>\n  );\n};\n","import { forwardRef } from 'react';\nimport { animated, useSpring } from 'react-spring';\n\nexport interface AnimatedGroupProps extends React.HTMLAttributes<SVGGElement> {\n  transform?: string;\n}\n\nexport const AnimatedGroup = forwardRef<SVGGElement, AnimatedGroupProps>(\n  ({ children, ...rest }, ref) => {\n    const { opacity } = useSpring({\n      opacity: 1,\n      from: { opacity: 0 },\n      delay: 300,\n    });\n\n    return (\n      <animated.g ref={ref} {...rest} opacity={opacity}>\n        {children}\n      </animated.g>\n    );\n  }\n);\n","import { CSVRow } from './shared';\n\nexport interface MinimumWage extends CSVRow {\n  year?: number;\n  state?: string;\n  stateMinWage?: number;\n  stateMinWageTodayDollars?: number;\n  federalMinWage?: number;\n  federalMinWageTodayDollars?: number;\n  effectiveMinWage?: number;\n  effectiveMinWageTodayDollars?: number;\n  cpiAverage?: number;\n  depLaborUncleanData?: string;\n  depLaborCleanedLowValue?: number;\n  depLaborCleanedLowValueTodayDollars?: number;\n  depLaborCleanedHighValue?: number;\n  depLaborCleanedHighValueTodayDollars?: number;\n  footnote?: string;\n  studio?: number;\n  oneBedroom?: number;\n  twoBedroom?: number;\n  threeBedroom?: number;\n  fourBedroom?: number;\n  population?: number;\n}\n\nexport interface Rent extends CSVRow {\n  state?: string;\n  year?: number;\n  studio?: number;\n  oneBedroom?: number;\n  twoBedroom?: number;\n  threeBedroom?: number;\n  fourBedroom?: number;\n  population?: number;\n}\n\nexport const MinimumWageCols = {\n  year: 'Year',\n  state: 'State',\n  stateMinWage: 'State Minimum Wage',\n  stateMinWageTodayDollars: 'State Minimum Wage (2020 Dollars)',\n  federalMinWage: 'Federal Minimum Wage',\n  federalMinWageTodayDollars: 'Federal Minimum Wage (2020 Dollars)',\n  effectiveMinWage: 'Effective Minimum Wage',\n  effectiveMinWageTodayDollars: 'Effective Minimum Wage (2020 Dollars)',\n  cpiAverage: 'Average Consumer Price Index',\n  depLaborUncleanData: 'Dep. Of Labor Unclean Data',\n  depLaborCleanedLowValue: 'Dep. Of Labor Cleaned Low Value',\n  depLaborCleanedLowValueTodayDollars:\n    'Dep. Of Labor Cleaned Low Value (2020 Dollars)',\n  depLaborCleanedHighValue: 'Dep. Of Labor Cleaned High Value',\n  depLaborCleanedHighValueTodayDollars:\n    'Dep. Of Labor Cleaned High Value (2020 Dollars)',\n  footnote: 'Footnote',\n  studio: 'Average Studio Apartment Cost',\n  oneBedroom: 'Average One Bedroom Apartment Cost',\n  twoBedroom: 'Average Two Bedroom Apartment Cost',\n  threeBedroom: 'Average Three Bedroom Apartment Cost',\n  fourBedroom: 'Average Four Bedroom Apartment Cost',\n  population: 'Population',\n} as const;\n\nexport const RentCols = {\n  state: 'State',\n  year: 'Year',\n  studio: 'Average Studio Apartment Cost',\n  oneBedroom: 'Average One Bedroom Apartment Cost',\n  twoBedroom: 'Average Two Bedroom Apartment Cost',\n  threeBedroom: 'Average Three Bedroom Apartment Cost',\n  fourBedroom: 'Average Four Bedroom Apartment Cost',\n  population: 'Population',\n} as const;\n\nexport type MinimumWageCol = typeof MinimumWageCols;\n","import { ScaleLinear } from 'd3';\n\nexport interface AxisBottom {\n  xScale: ScaleLinear<number, number, never>;\n  height: number;\n  tickOffset?: number;\n}\n\nexport const AxisBottom: React.FC<AxisBottom> = ({\n  xScale,\n  height,\n  tickOffset = 3,\n}) => {\n  return (\n    <>\n      {xScale.ticks().map((tick) => (\n        <g\n          style={{ stroke: '#C0C0BB' }}\n          key={tick}\n          transform={`translate(${xScale(tick)}, 0)`}\n        >\n          <line y2={height} />\n          <text dy=\".71em\" textAnchor=\"middle\" y={height + tickOffset}>\n            {tick}\n          </text>\n        </g>\n      ))}\n    </>\n  );\n};\n","import { ScaleLinear } from 'd3';\n\nexport interface AxisLeftProps {\n  yScale: ScaleLinear<number, number, never>;\n  width: number;\n  tickOffset?: number;\n}\n\nexport const AxisLeft: React.FC<AxisLeftProps> = ({\n  yScale,\n  width,\n  tickOffset = 3,\n}) => (\n  <>\n    {yScale.ticks().map((tick) => (\n      <g\n        key={tick}\n        style={{ stroke: '#C0C0BB' }}\n        transform={`translate(0,${yScale(tick)})`}\n      >\n        <line x2={width} />\n        <text textAnchor=\"end\" x={-tickOffset} dy=\".32em\">\n          {tick}\n        </text>\n      </g>\n    ))}\n  </>\n);\n","/* eslint-disable react/no-array-index-key */\nimport {\n  DSVParsedArray,\n  extent,\n  interpolateTurbo,\n  scaleLinear,\n  scaleOrdinal,\n  line,\n  curveBasis,\n  brushX,\n  select,\n} from 'd3';\nimport {\n  PropsWithChildren,\n  useCallback,\n  useEffect,\n  useMemo,\n  useRef,\n  useState,\n} from 'react';\n\nimport { AxisBottom } from './AxisBottom';\nimport { AxisLeft } from './AxisLeft';\nimport { CSVRow } from '../../services/models/shared';\nimport { KeysMatching } from '../../types/shared';\nimport { AnimatedGroup } from '../AnimatedGroup';\n\nexport interface LineChartProps<T extends CSVRow> {\n  filter?: string;\n  grouping: KeysMatching<T, string | undefined>;\n  width: number;\n  height: number;\n  margin: { top: number; right: number; bottom: number; left: number };\n  x: KeysMatching<T, number | undefined>;\n  y: KeysMatching<T, number | undefined>;\n  xLabel: string;\n  yLabel: string;\n  opacity?: string;\n  data: DSVParsedArray<T>;\n  strokeWidth?: number;\n  stroke?: string;\n  focusable?: boolean;\n}\n\nconst xAxisLabelOffset = 50;\nconst brushedSectionSize = 0.2;\n\nconst filterData = <T extends CSVRow>(\n  data: DSVParsedArray<T>,\n  grouping: KeysMatching<T, string | undefined>,\n  filter?: string,\n  brushExtent?: [number, number],\n  x?: KeysMatching<T, number | undefined>\n) => {\n  const lines: T[][] = [];\n  let rowIndex = 0;\n  // no great way to make this efficient\n  data\n    .filter((row) => {\n      if (brushExtent && x) {\n        return (\n          (filter === undefined ||\n            (row[grouping] as string).toLowerCase() === filter.toLowerCase()) &&\n          (row[x] as number) >= brushExtent[0] &&\n          (row[x] as number) <= brushExtent[1]\n        );\n      }\n\n      return (\n        filter === undefined ||\n        (row[grouping] as string).toLowerCase() === filter.toLowerCase()\n      );\n    })\n    .sort((rowOne, rowTwo) => {\n      return (rowOne[grouping] as string).localeCompare(\n        rowTwo[grouping] as string\n      );\n    })\n    .forEach((row, index, arr) => {\n      if (\n        index >= 1 &&\n        (row[grouping] as string) !== (arr[index - 1][grouping] as string)\n      ) {\n        lines.push([row]);\n        rowIndex += 1;\n      } else if (index === 0) {\n        lines.push([row]);\n      } else {\n        lines[rowIndex].push(row);\n      }\n    });\n\n  return lines;\n};\n\nexport const LineChart = <T extends CSVRow>({\n  filter,\n  grouping,\n  width,\n  height = 400,\n  margin,\n  x,\n  y,\n  xLabel,\n  yLabel,\n  data,\n  opacity = '.3',\n  strokeWidth = 3,\n  stroke,\n  focusable = true,\n}: PropsWithChildren<LineChartProps<T>>) => {\n  const [brushExtent, setBrushExtent] = useState<[number, number]>();\n  const brushRef = useRef<SVGGElement>(null);\n\n  const xValue = useCallback((row: T) => row[x] as number, [x]);\n  const yValue = useCallback((row: T) => row[y] as number, [y]);\n  const colorValue = useCallback(\n    (row: T) => row[grouping] as string,\n    [grouping]\n  );\n\n  const brushedSectionHeight = useMemo(\n    () => brushedSectionSize * height,\n    [height]\n  );\n\n  const yRange = useMemo(\n    () => extent(data, yValue) as [number, number],\n    [data, yValue]\n  );\n  const xRange = useMemo(\n    () => extent(data, xValue) as [number, number],\n    [data, xValue]\n  );\n  const focusXRange = useMemo(\n    () => extent(data, xValue) as [number, number],\n    [data, xValue]\n  );\n\n  const paddedHeight = useMemo(\n    () => height - margin.top - margin.bottom,\n    [height, margin]\n  );\n  const paddedWidth = useMemo(\n    () => width - margin.left - margin.right,\n    [width, margin]\n  );\n\n  const xScale = useMemo(\n    () =>\n      scaleLinear()\n        .domain(brushExtent || xRange)\n        .range([0, paddedWidth])\n        .nice(),\n    [paddedWidth, xRange, brushExtent]\n  );\n  const yScale = useMemo(\n    () => scaleLinear().domain(yRange).range([paddedHeight, 0]),\n    [paddedHeight, yRange]\n  );\n  const focusXScale = useMemo(\n    () => scaleLinear().domain(focusXRange).range([0, paddedWidth]).nice(),\n    [paddedWidth, focusXRange]\n  );\n  const focusYScale = useMemo(\n    () =>\n      scaleLinear()\n        .domain(yRange)\n        .range([height * brushedSectionSize, 0]),\n    [yRange, height]\n  );\n\n  const colorScale = useMemo(() => {\n    const uniqueOrdinalValues = Array.from(new Set(data.map(colorValue)));\n    const numUniqueOrdinalValues = uniqueOrdinalValues.length;\n\n    const colors = uniqueOrdinalValues.map((_, index) => {\n      return interpolateTurbo(index / numUniqueOrdinalValues);\n    });\n    return scaleOrdinal<string>().domain(data.map(colorValue)).range(colors);\n  }, [data, colorValue]);\n\n  const marginsForAxes = useMemo(\n    () => ({\n      ...margin,\n      left: yRange[1].toString().length * 8.75 + 20,\n    }),\n    [margin, yRange]\n  );\n\n  const yAxisLabelOffset = useMemo(\n    () => yRange[1].toString().length * 8.75 + 10,\n    [yRange]\n  );\n\n  const drawLines = useMemo(() => {\n    return line<T>()\n      .x((row) => xScale(xValue(row)))\n      .y((row) => yScale(yValue(row)))\n      .curve(curveBasis);\n  }, [xScale, yScale, yValue, xValue]);\n\n  const drawFocus = useMemo(() => {\n    return line<T>()\n      .x((row) => focusXScale(xValue(row)))\n      .y((row) => focusYScale(yValue(row)))\n      .curve(curveBasis);\n  }, [focusXScale, focusYScale, yValue, xValue]);\n\n  useEffect(() => {\n    if (brushRef.current && paddedWidth > 0) {\n      const brush = brushX().extent([\n        [0, 0],\n        [paddedWidth, brushedSectionHeight],\n      ]);\n      brush(select<SVGGElement, unknown>(brushRef.current));\n      brush.on('brush end', (event) => {\n        setBrushExtent(\n          event.selection && event.selection.map(focusXScale.invert)\n        );\n      });\n    }\n  }, [paddedWidth, brushedSectionHeight, brushRef, focusXScale]);\n\n  const lines = useMemo(\n    () => filterData(data, grouping, filter, brushExtent, x),\n    [data, grouping, filter, brushExtent, x]\n  );\n\n  const focusLines = useMemo(() => {\n    if (focusable) {\n      return filterData(data, grouping, filter);\n    }\n    return undefined;\n  }, [data, grouping, filter, focusable]);\n\n  return (\n    <svg\n      width={width}\n      height={focusable ? height + height * brushedSectionSize + 50 : height}\n    >\n      <g transform={`translate(${marginsForAxes.left},${marginsForAxes.top})`}>\n        <AxisBottom xScale={xScale} height={paddedHeight} tickOffset={10} />\n\n        <text\n          className=\"axis-label\"\n          textAnchor=\"middle\"\n          transform={`translate(${-yAxisLabelOffset},${\n            paddedHeight / 2\n          }) rotate(-90)`}\n        >\n          {yLabel}\n        </text>\n\n        <AxisLeft yScale={yScale} width={paddedWidth} tickOffset={5} />\n\n        {!focusable && (\n          <text\n            className=\"axis-label\"\n            x={paddedWidth / 2}\n            y={paddedHeight + xAxisLabelOffset}\n            textAnchor=\"middle\"\n          >\n            {xLabel}\n          </text>\n        )}\n\n        <AnimatedGroup>\n          {lines.map((toDrawLine) => (\n            <path\n              key={toDrawLine[0][grouping]}\n              d={drawLines(toDrawLine)!}\n              stroke={stroke || colorScale(colorValue(toDrawLine[0]))}\n              strokeWidth={strokeWidth}\n              opacity={opacity}\n              fill=\"none\"\n            />\n          ))}\n        </AnimatedGroup>\n      </g>\n      {focusable && (\n        <AnimatedGroup\n          ref={brushRef}\n          transform={`translate(${marginsForAxes.left}, ${\n            height + margin.bottom + margin.top - brushedSectionHeight\n          })`}\n        >\n          <AxisBottom\n            xScale={focusXScale}\n            height={brushedSectionHeight}\n            tickOffset={10}\n          />\n\n          {focusLines?.map((toDrawLine) => (\n            <path\n              key={toDrawLine[0][grouping]}\n              d={drawFocus(toDrawLine)!}\n              stroke={stroke || colorScale(colorValue(toDrawLine[0]))}\n              strokeWidth={strokeWidth}\n              opacity={opacity}\n              fill=\"none\"\n            />\n          ))}\n        </AnimatedGroup>\n      )}\n    </svg>\n  );\n};\n","import { Col, Row, Select, Space, Typography } from 'antd';\n\nimport { CSVRow } from '../../services/models/shared';\nimport { DSVParsedArray } from 'd3-dsv';\nimport { KeysMatching } from '../../types/shared';\nimport { PropsWithChildren } from 'react';\n\nconst { Text } = Typography;\nconst { Option } = Select;\n\nexport interface LineChartAxesProps<T extends CSVRow> {\n  id: string;\n  selectedX: KeysMatching<T, number | undefined>;\n  selectedY: KeysMatching<T, number | undefined>;\n  selectedGrouping: KeysMatching<T, string | undefined>;\n  selectedFilter: string;\n  onSelectX: (xAxis: KeysMatching<T, number | undefined>) => void;\n  onSelectY: (yAxis: KeysMatching<T, number | undefined>) => void;\n  onSelectGrouping: (grouping: KeysMatching<T, string | undefined>) => void;\n  onSelectFilter: (filter: string) => void;\n  data: DSVParsedArray<T>;\n  labels: Record<string, string>;\n}\n\nexport const LineChartAxes = <T extends CSVRow>({\n  id,\n  selectedX,\n  selectedY,\n  selectedGrouping,\n  selectedFilter,\n  onSelectX,\n  onSelectY,\n  onSelectGrouping,\n  onSelectFilter,\n  data,\n  labels,\n}: PropsWithChildren<LineChartAxesProps<T>>) => {\n  const groupValue = (row: T) => row[selectedGrouping] as string;\n  const uniqueGroupValues = Array.from(new Set(data.map(groupValue)));\n  uniqueGroupValues.push('All');\n\n  // this is probably not the best way of doing this\n  const numericOptions = Object.entries(data[0])\n    .filter((col) => typeof col[1] === 'number')\n    .map((col) => col[0]);\n\n  const stringOptions = Object.entries(data[0])\n    .filter((col) => typeof col[1] === 'string')\n    .map((col) => col[0]);\n\n  return (\n    <Row style={{ width: '100%' }} gutter={[12, 12]}>\n      <Col sm={7} md={7} lg={8}>\n        <Space direction=\"vertical\" size=\"small\" style={{ width: '100%' }}>\n          <Text id={`${id}-x-axis-label`} strong style={{ fontSize: 12 }}>\n            X Axis:\n          </Text>\n          <Select\n            aria-labelledby={`${id}-x-axis-label`}\n            style={{ width: '100%', maxWidth: '200px' }}\n            defaultValue={selectedX as string}\n            onChange={onSelectX as (value: string) => void}\n          >\n            {numericOptions.map((key) => (\n              <Option value={key} key={key}>\n                {labels[key]}\n              </Option>\n            ))}\n          </Select>\n        </Space>\n      </Col>\n      <Col sm={7} md={7} lg={8}>\n        <Space direction=\"vertical\" size=\"small\" style={{ width: '100%' }}>\n          <Text strong style={{ fontSize: 12 }}>\n            Y Axis:\n          </Text>\n          <Select\n            style={{ width: '100%', maxWidth: '200px' }}\n            defaultValue={selectedY as string}\n            onChange={onSelectY as (value: string) => void}\n          >\n            {numericOptions.map((key) => (\n              <Option value={key} key={key}>\n                {labels[key]}\n              </Option>\n            ))}\n          </Select>\n        </Space>\n      </Col>\n      <Col sm={7} md={7} lg={8}>\n        <Space direction=\"vertical\" size=\"small\" style={{ width: '100%' }}>\n          <Text strong style={{ fontSize: 12 }}>\n            Grouping:\n          </Text>\n          <Select\n            style={{ width: '100%', maxWidth: '200px' }}\n            defaultValue={selectedGrouping as string}\n            onChange={onSelectGrouping as (value: string) => void}\n          >\n            {stringOptions.map((key) => (\n              <Option value={key} key={key}>\n                {labels[key]}\n              </Option>\n            ))}\n          </Select>\n        </Space>\n      </Col>\n      <Col sm={7} md={7} lg={8}>\n        <Space direction=\"vertical\" size=\"small\" style={{ width: '100%' }}>\n          <Text strong style={{ fontSize: 12 }}>\n            Filter:\n          </Text>\n          <Select\n            style={{ width: '100%', maxWidth: '200px' }}\n            defaultValue={selectedFilter}\n            onChange={onSelectFilter}\n          >\n            {uniqueGroupValues.map((key) => (\n              <Option value={key} key={key}>\n                {key}\n              </Option>\n            ))}\n          </Select>\n        </Space>\n      </Col>\n    </Row>\n  );\n};\n","import {\n  MinimumWage,\n  MinimumWageCols,\n} from '../../../services/models/minimumWage';\n\nimport { LineChart } from '../../../components/LineChart';\nimport { PageLayout } from '../../../layout/PageLayout';\nimport { Typography } from 'antd';\nimport { useFallback } from '../../../hooks/useFallback';\nimport { useMinimumWageQuery } from '../../../services/hooks/useQuery';\nimport { useParams } from 'react-router-dom';\n\nconst { Text } = Typography;\n\nexport interface LineChartLookUpPageProps {}\n\nexport const LineChartLookUpPage: React.FC<LineChartLookUpPageProps> = () => {\n  const { state } = useParams<{ state: string }>();\n\n  const { data, isError, isLoading } = useMinimumWageQuery();\n\n  const { fallback } = useFallback<MinimumWage>(isLoading, isError, data);\n\n  if (fallback || !data) {\n    return fallback;\n  }\n\n  const xAxisLabel = MinimumWageCols.year;\n  const yAxisLabel = MinimumWageCols.effectiveMinWageTodayDollars;\n\n  const description = (\n    <>\n      <Text>Need to add this</Text>\n    </>\n  );\n\n  return (\n    <PageLayout\n      pageTitle={`Effective Minimum Wage For ${state}`}\n      description={description}\n      generateChart={({ width }) => (\n        <LineChart<MinimumWage>\n          width={width}\n          height={400}\n          margin={{ top: 30, right: 30, bottom: 50, left: 0 }}\n          data={data}\n          xLabel={xAxisLabel}\n          yLabel={yAxisLabel}\n          x=\"year\"\n          y=\"effectiveMinWageTodayDollars\"\n          grouping=\"state\"\n          filter={state}\n          opacity=\".4\"\n          strokeWidth={3}\n          stroke=\"blue\"\n        />\n      )}\n    />\n  );\n};\n"],"sourceRoot":""}