{"version":3,"sources":["services/apis.ts","services/lib/maps.ts","services/lib/avocado.ts","services/lib/hurricane.ts","util/inflation.ts","services/lib/minimumWage.ts","services/hooks/useQuery.tsx","hooks/useFallback.tsx","pages/MinimumWage/constants.ts","components/CSVInfo/CSVInfo.tsx","layout/DatasetInfoLayout.tsx","pages/MinimumWage/CSVInfoPage/CSVInfoPage.tsx"],"names":["BASE_URL","API","MinimumWageCSV","AvocadoCSV","HurricaneCSV","RentCSV","WorldMap","USMap","fetchWorldMap","a","fetch","json","worldMap","fetchUSMap","usMap","parseCSV","row","index","columns","date","parse","Date","averagePrice","Number","AveragePrice","totalVolume","totalBags","smallBags","largeBags","xLargeBags","type","year","region","month","getMonth","day","getDate","rowType","fetchAvocadoCSV","csv","avocadoCSV","filter","convertLatLong","lat","direction","slice","coordinate","refinedCoordinate","id","ID","name","Name","time","event","Event","status","Status","latitude","Latitude","longitude","Longitude","maxWind","minPressure","lowWindNE","lowWindSE","lowWindSW","lowWindNW","moderateWindNE","moderateWindSE","moderateWindSW","moderateWindNW","highWindNE","highWindSE","highWindSW","highWindNW","getFullYear","fetchHurricaneCSV","hurricaneCSV","accountForInflation","fromCPI","dollars","parseMinimumCsv","Year","state","State","stateMinWage","stateMinWageTodayDollars","federalMinWage","federalMinWageTodayDollars","effectiveMinWage","effectiveMinWageTodayDollars","cpiAverage","depLaborUncleanData","depLaborCleanedLowValue","depLaborCleanedLowValueTodayDollars","depLaborCleanedHighValue","depLaborCleanedHighValueTodayDollars","footnote","Footnote","parseRentCsv","studio","oneBedroom","twoBedroom","threeBedroom","fourBedroom","population","Population","merge","rents","minWages","map","minWage","rent","find","fetchMinimumWageCSV","useMinimumWageQuery","options","useQuery","useAvocadoQuery","useHurricaneQuery","useWorldMapQuery","useUSMapQuery","Text","Typography","useFallback","isLoading","isError","data","fallback","strong","style","color","Constants","minWageUrl","rentUrl","CSVInfo","dataSetName","dataSetSize","numOfRows","numOfCols","titleStyle","bodyStyle","size","DatasetInfoLayout","description","datasetName","gutter","justify","width","sm","md","fontSize","Math","round","csvFormat","length","Object","keys","CSVInfoPage","to","pathname","target"],"mappings":"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","file":"static/js/18.9aa44f39.chunk.js","sourcesContent":["const BASE_URL = 'https://gist.githubusercontent.com/apetit2/';\n\nexport const API = {\n  MinimumWageCSV: `${BASE_URL}212a7cd715f8ba34eb637d014fffb12f/raw/0cc5e300ed1747be91ec391f4546e1a44c90d810/minimum-wage-data.csv`,\n  AvocadoCSV: `${BASE_URL}a3a8f61f0c56a1d1448804a584b7c1bb/raw/53be30feacedf088d4b8f609ccc509ca1e52591d/avocado.csv`,\n  HurricaneCSV: `${BASE_URL}5c1aa857558bc646281763252ea13d57/raw/daa565a0dc8c0dd99a63d162efad23037b067678/pacific.csv`,\n  RentCSV: `${BASE_URL}aaa39169ab48ff313cfb2bfe12486fef/raw/6d5308a46301f7f2b08c6974a3be7e7e138434f8/rent.csv`,\n  WorldMap: 'https://unpkg.com/world-atlas@1.1.4/world/110m.json',\n  USMap: 'https://unpkg.com/us-atlas@3.0.0/states-10m.json',\n};\n","import { USMap, WorldMap } from '../models/maps';\n\nimport { API } from '../apis';\n\nexport const fetchWorldMap = async () => {\n  const worldMap = (await (await fetch(API.WorldMap)).json()) as WorldMap;\n  return worldMap;\n};\n\nexport const fetchUSMap = async () => {\n  const usMap = (await (await fetch(API.USMap)).json()) as USMap;\n  return usMap;\n};\n","/* eslint-disable @typescript-eslint/no-unused-vars */\nimport { DSVParsedArray, DSVRowString, csv } from 'd3';\n\nimport { API } from '../apis';\nimport { Avocado } from '../models/avocado';\nimport { parse } from 'date-fns';\n\nconst parseCSV: (\n  row: DSVRowString<string>,\n  index: number,\n  columns: string[]\n) => Avocado = (row, index, columns) => {\n  const date = parse(row.Date ?? '', 'yyyy-MM-dd', new Date());\n  return {\n    date: row.Date,\n    averagePrice: Number(row.AveragePrice),\n    totalVolume: Number(row['Total Volume']),\n    '4046': Number(row['4046']),\n    '4225': Number(row['4225']),\n    '4770': Number(row['4770']),\n    totalBags: Number(row['Total Bags']),\n    smallBags: Number(row['Small Bags']),\n    largeBags: Number(row['Large Bags']),\n    xLargeBags: Number(row['XLarge Bags']),\n    type: row.type,\n    year: Number(row.year),\n    region: row.region,\n    month: date.getMonth() + 1,\n    day: date.getDate(),\n    rowType: 'Avocado',\n  };\n};\n\nexport const fetchAvocadoCSV = async () => {\n  const avocadoCSV = (await csv(API.AvocadoCSV, parseCSV)).filter(\n    (row) => row.year !== 0\n  ) as DSVParsedArray<Avocado>;\n  return avocadoCSV;\n};\n","/* eslint-disable @typescript-eslint/no-unused-vars */\nimport { DSVRowString, csv } from 'd3';\n\nimport { API } from '../apis';\nimport { Hurricane } from '../models/hurricane';\nimport { parse } from 'date-fns';\n\nconst convertLatLong = (lat: string | undefined) => {\n  const direction = lat?.slice(-1);\n  const coordinate = Number(lat?.slice(0, -1));\n  let refinedCoordinate = 0;\n  switch (direction) {\n    case 'W':\n    case 'S':\n      refinedCoordinate = Number(coordinate) / -1;\n      break;\n    default:\n      refinedCoordinate = Number(coordinate);\n  }\n\n  return refinedCoordinate;\n};\n\nconst parseCSV: (\n  row: DSVRowString<string>,\n  index: number,\n  columns: string[]\n) => Hurricane = (row, index, columns) => {\n  const date = parse(row.Date ?? '', 'yyyyMMdd', new Date());\n\n  return {\n    id: row.ID,\n    name: row.Name,\n    date: row.Date,\n    time: Number(row.time),\n    event: row.Event,\n    status: row.Status,\n    latitude: convertLatLong(row.Latitude),\n    longitude: convertLatLong(row.Longitude),\n    maxWind: Number(row['Maximum Wind']),\n    minPressure: Number(row['Minimum Pressure']),\n    lowWindNE: Number(row['Low Wind NE']),\n    lowWindSE: Number(row['Low Wind SE']),\n    lowWindSW: Number(row['Low Wind SW']),\n    lowWindNW: Number(row['Low Wind NW']),\n    moderateWindNE: Number(row['Moderate Wind NE']),\n    moderateWindSE: Number(row['Moderate Wind SE']),\n    moderateWindSW: Number(row['Moderate Wind SW']),\n    moderateWindNW: Number(row['Moderate Wind NW']),\n    highWindNE: Number(row['High Wind NE']),\n    highWindSE: Number(row['High Wind SE']),\n    highWindSW: Number(row['High Wind SW']),\n    highWindNW: Number(row['High Wind NW']),\n    year: date.getFullYear(),\n    month: date.getMonth() + 1,\n    day: date.getDate(),\n    rowType: 'Hurricane',\n  };\n};\n\nexport const fetchHurricaneCSV = async () => {\n  const hurricaneCSV = await csv(API.HurricaneCSV, parseCSV);\n  return hurricaneCSV;\n};\n","const CPI_TODAY = 260.28;\n\nexport const accountForInflation = (fromCPI: number, dollars: number) => {\n  return (dollars * fromCPI) / CPI_TODAY;\n};\n","import { DSVRowString, csv, DSVParsedArray } from 'd3';\nimport { accountForInflation } from '../../util/inflation';\n\nimport { API } from '../apis';\nimport { MinimumWage, Rent } from '../models/minimumWage';\n\nconst parseMinimumCsv: (\n  row: DSVRowString<string>,\n  index: number,\n  columns: string[]\n) => MinimumWage = (row) => {\n  return {\n    year: Number(row.Year),\n    state: row.State,\n    stateMinWage: Number(row['State.Minimum.Wage']),\n    stateMinWageTodayDollars: Number(row['State.Minimum.Wage.2020.Dollars']),\n    federalMinWage: Number(row['Federal.Minimum.Wage']),\n    federalMinWageTodayDollars: Number(\n      row['Federal.Minimum.Wage.2020.Dollars']\n    ),\n    effectiveMinWage: Number(row['Effective.Minimum.Wage']),\n    effectiveMinWageTodayDollars: Number(\n      row['Effective.Minimum.Wage.2020.Dollars']\n    ),\n    cpiAverage: Number(row['CPI.Average']),\n    depLaborUncleanData: row['Department.Of.Labor.Uncleaned.Data'],\n    depLaborCleanedLowValue: Number(\n      row['Department.Of.Labor.Cleaned.Low.Value']\n    ),\n    depLaborCleanedLowValueTodayDollars: Number(\n      row['Department.Of.Labor.Cleaned.Low.Value.2020.Dollars']\n    ),\n    depLaborCleanedHighValue: Number(\n      row['Department.Of.Labor.Cleaned.High.Value']\n    ),\n    depLaborCleanedHighValueTodayDollars: Number(\n      row['Department.Of.Labor.Cleaned.High.Value.2020.Dollars']\n    ),\n    footnote: row.Footnote,\n    rowType: 'MinWage',\n  };\n};\n\nconst parseRentCsv: (\n  row: DSVRowString<string>,\n  index: number,\n  columns: string[]\n) => Rent = (row) => {\n  return {\n    state: row.State,\n    year: Number(row.Year),\n    studio: Number(row['Rent 0 BR']),\n    oneBedroom: Number(row['Rent 1 BR']),\n    twoBedroom: Number(row['Rent 2 BR']),\n    threeBedroom: Number(row['Rent 3 BR']),\n    fourBedroom: Number(row['Rent 4 BR']),\n    population: Number(row.Population),\n    rowType: 'Rent',\n  };\n};\n\nconst merge = (\n  rents: DSVParsedArray<Rent>,\n  minWages: DSVParsedArray<MinimumWage>\n) => {\n  const res = minWages.map((minWage) => {\n    const rent = rents.find(\n      (row) => row.year === minWage.year && row.state === minWage.state\n    );\n\n    if (!rent) {\n      return minWage;\n    }\n\n    return {\n      ...minWage,\n      studio: accountForInflation(minWage.cpiAverage!, rent.studio!),\n      oneBedroom: accountForInflation(minWage.cpiAverage!, rent.oneBedroom!),\n      twoBedroom: accountForInflation(minWage.cpiAverage!, rent.twoBedroom!),\n      threeBedroom: accountForInflation(\n        minWage.cpiAverage!,\n        rent.threeBedroom!\n      ),\n      fourBedroom: accountForInflation(minWage.cpiAverage!, rent.fourBedroom!),\n      population: rent.population,\n    } as MinimumWage;\n  });\n\n  return res as DSVParsedArray<MinimumWage>;\n};\n\nexport const fetchMinimumWageCSV = async () => {\n  const minWages = await csv(API.MinimumWageCSV, parseMinimumCsv);\n  const rents = await csv(API.RentCSV, parseRentCsv);\n\n  return merge(rents, minWages);\n};\n\nexport const fetchRentCSV = async () => {\n  const res = await csv(API.RentCSV, parseRentCsv);\n  return res;\n};\n","import { USMap, WorldMap } from '../models/maps';\nimport { UseQueryOptions, useQuery } from 'react-query';\nimport { fetchUSMap, fetchWorldMap } from '../lib/maps';\n\nimport { Avocado } from '../models/avocado';\nimport { DSVParsedArray } from 'd3-dsv';\nimport { Hurricane } from '../models/hurricane';\nimport { MinimumWage, Rent } from '../models/minimumWage';\nimport { fetchAvocadoCSV } from '../lib/avocado';\nimport { fetchHurricaneCSV } from '../lib/hurricane';\nimport { fetchMinimumWageCSV, fetchRentCSV } from '../lib/minimumWage';\n\nconst useMinimumWageQuery = (\n  options?: UseQueryOptions<DSVParsedArray<MinimumWage>, Error>\n) =>\n  useQuery<DSVParsedArray<MinimumWage>, Error>(\n    'minWage',\n    fetchMinimumWageCSV,\n    options\n  );\n\nconst useRentQuery = (options?: UseQueryOptions<DSVParsedArray<Rent>, Error>) =>\n  useQuery<DSVParsedArray<Rent>, Error>('rent', fetchRentCSV, options);\n\nconst useAvocadoQuery = (\n  options?: UseQueryOptions<DSVParsedArray<Avocado>, Error>\n) =>\n  useQuery<DSVParsedArray<Avocado>, Error>('avocado', fetchAvocadoCSV, options);\n\nconst useHurricaneQuery = (\n  options?: UseQueryOptions<DSVParsedArray<Hurricane>, Error>\n) =>\n  useQuery<DSVParsedArray<Hurricane>, Error>(\n    'hurricane',\n    fetchHurricaneCSV,\n    options\n  );\n\nconst useWorldMapQuery = (options?: UseQueryOptions<WorldMap, Error>) =>\n  useQuery<WorldMap, Error>('worldMap', fetchWorldMap, options);\n\nconst useUSMapQuery = (options?: UseQueryOptions<USMap, Error>) =>\n  useQuery<USMap, Error>('usMap', fetchUSMap, options);\n\nexport {\n  useAvocadoQuery,\n  useHurricaneQuery,\n  useMinimumWageQuery,\n  useWorldMapQuery,\n  useUSMapQuery,\n  useRentQuery,\n};\n","import { CSVRow } from '../services/models/shared';\nimport { DSVParsedArray } from 'd3-dsv';\nimport { Loading } from '../components/Loading/Loading';\nimport { Typography } from 'antd';\n\nconst { Text } = Typography;\n\nexport const useFallback = <T extends CSVRow>(\n  isLoading: boolean,\n  isError: boolean,\n  data?: DSVParsedArray<T>\n) => {\n  let fallback = null;\n\n  if (isError) {\n    fallback = (\n      <Text strong style={{ color: 'red' }}>\n        Failed To Load Dataset.\n      </Text>\n    );\n  }\n\n  if (isLoading) {\n    fallback = <Loading />;\n  }\n\n  if (!data && !isLoading) {\n    fallback = <Text strong>No Data Found.</Text>;\n  }\n\n  return { fallback };\n};\n","export const Constants = {\n  minWageUrl:\n    'https://gist.github.com/apetit2/212a7cd715f8ba34eb637d014fffb12f',\n  rentUrl: 'https://gist.github.com/apetit2/aaa39169ab48ff313cfb2bfe12486fef',\n} as const;\n","import { Space, Typography } from 'antd';\n\nconst { Text } = Typography;\n\nexport interface CSVInfoProps {\n  dataSetName: string;\n  dataSetSize: number;\n  numOfRows: number;\n  numOfCols: number;\n  titleStyle?: React.CSSProperties;\n  bodyStyle?: React.CSSProperties;\n}\n\nexport const CSVInfo: React.FC<CSVInfoProps> = ({\n  dataSetName,\n  dataSetSize,\n  numOfRows,\n  numOfCols,\n  titleStyle,\n  bodyStyle,\n}) => {\n  return (\n    <Space size=\"small\" direction=\"vertical\">\n      <Text strong style={titleStyle}>\n        {dataSetName} CSV Characteristics\n      </Text>\n      <Text style={bodyStyle}>Size: {dataSetSize} KB</Text>\n      <Text style={bodyStyle}>Number of Rows: {numOfRows}</Text>\n      <Text style={bodyStyle}>Number of Columns: {numOfCols}</Text>\n    </Space>\n  );\n};\n","import { Col, Row, Space, Typography } from 'antd';\nimport { DSVParsedArray, csvFormat } from 'd3-dsv';\n\nimport { CSVInfo } from '../components/CSVInfo';\nimport { CSVRow } from '../services/models/shared';\nimport { ReactElement } from 'react';\n\nconst { Text } = Typography;\n\nexport interface DatasetInfoLayoutProps<T extends CSVRow> {\n  description: ReactElement;\n  datasetName: string;\n  data: DSVParsedArray<T>;\n}\n\nexport const DatasetInfoLayout = <T extends CSVRow>({\n  description,\n  datasetName,\n  data,\n}: DatasetInfoLayoutProps<T>) => {\n  return (\n    <>\n      <Row gutter={[0, 24]} justify=\"space-between\" style={{ width: '100%' }}>\n        <Col sm={10} md={7}>\n          <CSVInfo\n            titleStyle={{ fontSize: '24px' }}\n            bodyStyle={{ fontSize: '18px' }}\n            dataSetName={datasetName}\n            dataSetSize={Math.round(csvFormat<T>(data).length / 1024)}\n            numOfRows={data.length}\n            numOfCols={Object.keys(data[0]).length}\n          />\n        </Col>\n        <Col sm={10} md={13}>\n          <Space direction=\"vertical\" style={{ width: '100%' }}>\n            <Text strong style={{ fontSize: '24px' }}>\n              Description\n            </Text>\n            {description}\n          </Space>\n        </Col>\n      </Row>\n    </>\n  );\n};\n","import { Constants } from '../constants';\nimport { DatasetInfoLayout } from '../../../layout/DatasetInfoLayout';\nimport { Link } from 'react-router-dom';\nimport { MinimumWage } from '../../../services/models/minimumWage';\nimport { Typography } from 'antd';\nimport { useFallback } from '../../../hooks/useFallback';\nimport { useMinimumWageQuery } from '../../../services/hooks/useQuery';\n\nconst { Text } = Typography;\n\nexport interface CSVInfoPageProps {}\n\nexport const CSVInfoPage: React.FC<CSVInfoPageProps> = () => {\n  const { data, isLoading, isError } = useMinimumWageQuery();\n\n  const { fallback } = useFallback<MinimumWage>(isLoading, isError, data);\n\n  if (fallback || !data) {\n    return fallback;\n  }\n\n  const description = (\n    <Text>\n      provides information on minimum wage for all U.S states and territories\n      since 1968. Data is supplied by the U.S Department of Labor. The CSV can\n      be found in the{' '}\n      <Link to={{ pathname: Constants.minWageUrl }} target=\"_blank\">\n        Minimum Wage Dataset\n      </Link>\n      .\n    </Text>\n  );\n\n  return (\n    <DatasetInfoLayout<MinimumWage>\n      description={description}\n      datasetName=\"Minimum Wage\"\n      data={data}\n    />\n  );\n};\n"],"sourceRoot":""}